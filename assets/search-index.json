[
  {
    "url": "/competitive_programming_book/src/chapter-abc-problems/",
    "title": "第7章：ABC A・B問題を攻略しよう",
    "content": "<! 本章は「中学生向け競技プログラミング入門書」の一部であり、 CC BY NC SA 4.0ライセンスの下で提供されます。 商用利用は事前許諾が必要です。 詳細：../../LICENSE.md 第7章：ABC A・B問題を攻略しよう 7.1 A問題の特徴と対策 いよいよ実際のAtCoder Beginner Contest（ABC）の問題に挑戦する時が来た！これまで学んだ技術を、本物の競技で活用しよう。まずはA問題から始めて、確実に得点できるようになることが大切だ。 【図7 1：ABC A問題の全体像と出題傾向】 {% capture a overview %} 配点 : 100–200点（全体の約15%） 制約 : 小規模（N ≤ 100 程度） 時間 : 5–10分目標 難易度 : 初心者向け {% endcapture %} {% include panel.html type=\"info\" title=\"🎯 A問題の基本特徴\" content=a overview %} {% capture a skills %} ✅ 基本的な入出力処理 ✅ 四則演算と条件分岐 ✅ 簡単な文字列操作 ✅ 問題文の正確な理解 {% endcapture %} {% include panel.html type=\"steps\" title=\"🧰 求められるスキル\" content=a skills %} A問題の出題パターン分析 ABC A問題は、以下の4つの典型パターンに分類できる： 📊 パターン1：四則演算（約35%） {% capture pat1 %} 特徴 : 数値計算、単位変換、簡単な数式 例 : ABC001 A 積雪深差（H2 H1を出力） 入出力 : 例 15 20 → 5 解法 : ポイント : • 問題文を式に翻訳する • 演算子の選択（+, , , //, %） • 入力形式の正確な理解 {% endcapture %} {% include panel.html type=\"info\" title=\"四則演算\" content=pat1 %} 📊 パターン2：条件判定・場合分け（約30%） {% capture pat2 %} 特徴 : if文による条件分岐、Yes/No判定 例 : ABC086 A Product（2つの整数A,Bの積が偶数か奇数か） 入出力 : 入力例 3 4 → 出力例 Even 解法 : ポイント : • 偶奇性の理解（偶数×任意=偶数） • 条件分岐の正確な実装 • 出力形式の厳密な遵守 {% endcapture %} {% include panel.html type=\"info\" title=\"条件判定・場合分け\" content=pat2 %} 📊 パターン3：文字列操作（約20%） {% capture pat3 %} 特徴 : 文字列の長さ、分割、結合、置換など 例 : ABC081 A Placing Marbles（文字列s中の'1'の個数） 入出力 : 入力例 101 → 出力例 2 解法 : または: {% endcapture %} {% include panel.html type=\"info\" title=\"文字列操作\" content=pat3 %} {% capture pat3 points %} 💡 ポイント • 基本的な文字列メソッドの活用（ , , など） • 文字の個別処理（forで1文字ずつ確認） • 短く正確に書ける方法を優先（読みやすさも重視） {% endcapture %} {% include panel.html type=\"steps\" title=\"文字列操作のポイント\" content=pat3 points %} 📊 パターン4：配列・リストの基本操作（約15%） {% capture pat4 %} 特徴 : 最大値・最小値、合計、要素数など 例 : ABC071 A Meal Delivery（x と a, b の距離を比較） 入出力 : 入力例 10 3 8 → 出力例 B 解法 : ポイント : • 距離の概念（絶対値）の理解 • 複数値の比較 • 数学関数（ ）の活用 {% endcapture %} {% include panel.html type=\"info\" title=\"配列・リストの基本操作\" content=pat4 %} A問題攻略の標準プロセス {% capture s1 read %} ✅ やること • 問題文を最低2回読む • 何を求められているかを明確化 • 入力形式と出力形式を正確に把握 • 制約条件（数値の範囲など）を確認 💡 チェックポイント • 計算式が必要か／条件分岐が必要か • 文字列処理か数値処理か • 出力は数値か文字列か • 特別な条件や例外はあるか 🚫 やらないこと • いきなりコードを書く • 複雑な解法を先に考える {% endcapture %} {% include panel.html type=\"steps\" title=\"🔍 Step 1: 問題文の精読（2–3分）\" content=s1 read %} {% capture s2 sample %} ✅ サンプルの活用 • 入力→出力の変換過程を手で追う • なぜその出力かを論理的に理解 • サンプルで正しく動くか検証 例：積雪深差 • 入力: 15, 20 → 思考: 20 15=5 → 出力: 5 ✅ 💭 自問自答 • 他のケースでも正しいか • 特殊ケース（負/0）は大丈夫か • 計算の順序は正しいか {% endcapture %} {% include panel.html type=\"info\" title=\"💡 Step 2: サンプル分析（1–2分）\" content=s2 sample %} {% capture s3 order %} ✅ 効率的な実装順序 1. 入力処理から書き始める 2. メインロジック（計算・判定）を実装 3. 出力処理を書く 4. コメントやサンプルで動作確認 {% endcapture %} {% include panel.html type=\"steps\" title=\"⌨️ Step 3: 実装（3–5分）\" content=s3 order %} <figure class=\"pseudocode\" <figcaption 実装例（積雪深差）</figcaption <pre <code class=\"language python\" 入力処理 h1 = int(input()) h2 = int(input()) メインロジック snow depth = h2 h1 出力処理 print(snow depth)</code </pre </figure {% capture s3 anti %} 🚫 避けるべき実装 • 一行にまとめすぎる複雑なコード • 意味の薄い変数名（ , など） • デバッグ用 の残存 {% endcapture %} {% include panel.html type=\"warn\" title=\"実装時のアンチパターン\" content=s3 anti %} {% capture s4 checks %} ✅ 必須チェック項目 • サンプル入力での動作確認 • 手動計算との結果照合 • 出力形式の正確性（改行・スペース） • エッジケース（最小値・最大値）の想定 {% endcapture %} {% include panel.html type=\"steps\" title=\"🧪 Step 4: 検証（1–2分）\" content=s4 checks %} {% capture s4 how %} 💡 検証方法 • 頭の中でサンプルをトレース • 紙に書いて計算過程を確認 • 別の方法でも同じ答えになるかを確認 {% endcapture %} {% include panel.html type=\"info\" title=\"検証の進め方\" content=s4 how %} {% capture s5 submit %} ✅ 提出前の最終確認 • 言語がPython 3か • コード全体を正しくコピー • 不要な print やコメントなし 🎯 提出のタイミング • サンプル通過を確認後すぐ提出 • 悩みすぎて時間を浪費しない • A問題は完璧より提出を優先 ⏱️ 時間管理 • A問題は10分以内を目安 • 15分超なら一旦飛ばす • B問題の時間を確保 {% endcapture %} {% include panel.html type=\"steps\" title=\"🚀 Step 5: 提出（30秒）\" content=s5 submit %} 実際のA問題解法実演 【図7 4：ABC085 A問題完全解法プロセス】 {% capture already problem %} 高橋君は年賀状に「2017年」と書いてしまった。これを「2018年」に修正して出力する。 入力: 1行の文字列（例: 2017年） 出力: 修正後の文字列（例: 2018年） {% endcapture %} {% include panel.html type=\"info\" title=\"📋 問題文（ABC085 A Already 2018）\" content=already problem %} {% capture already analysis %} 理解したこと • 文字列の一部を置換する問題 • 「2017」を「2018」に置換すればよい 方針 • を使う {% endcapture %} {% include panel.html type=\"steps\" title=\"🔍 分析\" content=already analysis %} <figure class=\"pseudocode\" <figcaption 実装（置換の活用）</figcaption <pre <code class=\"language python\" s = input() print(s.replace('2017', '2018'))</code </pre <figcaption 別解（分割・結合）</figcaption <pre <code class=\"language python\" s = input() parts = s.split('2017') print('2018'.join(parts))</code </pre <figcaption 検証（サンプル）</figcaption <pre <code class=\"language text\" 入力: 2017年 → 出力: 2018年</code </pre </figure {% capture already submit %} 提出時の確認 ✅ 余計な空白/改行がない ✅ 入力に「2017」が複数あっても置換できる {% endcapture %} {% include panel.html type=\"steps\" title=\"🧪 検証/提出\" content=already submit %} 7.2 A問題を実際に解いてみよう 理論だけでなく、実際の問題をいくつか解いて、パターンを体感してみよう。様々なタイプの問題を通じて、A問題のコツを掴んでいこう。 四則演算タイプの実演 【図7 5：ABC150 A問題「500 Yen Coins」完全解法】 {% capture coins500 problem %} 500円玉を K 枚持っている。X 円の品物を買えるか判定せよ（Yes/No）。 入力: K X（Kは500円玉の枚数, Xは値段） {% endcapture %} {% include panel.html type=\"info\" title=\"📋 問題文（ABC150 A）\" content=coins500 problem %} {% capture coins500 analysis %} 判定条件 • 所持金 = 500 × K • 所持金 ≥ X なら Yes {% endcapture %} {% include panel.html type=\"steps\" title=\"🔍 分析\" content=coins500 analysis %} <figure class=\"pseudocode\" <figcaption 実装（シンプルな比較）</figcaption <pre <code class=\"language python\" k, x = map(int, input().split()) print('Yes' if 500 k = x else 'No')</code </pre <figcaption サンプル検証</figcaption <pre <code class=\"language text\" 入力: 2 900 → 500 2=1000 ≥ 900 → Yes</code </pre </figure 条件分岐タイプの実演 【図7 6：ABC088 A問題「Infinite Coins」完全解法】 {% capture infinite problem %} N 円の支払いが可能か判定する。A は所持している 1円玉の枚数。500円玉は無限に使える。 入力: N, A 出力: 支払えるなら Yes、そうでなければ No {% endcapture %} {% include panel.html type=\"info\" title=\"📋 問題文（ABC088 A Infinite Coins）\" content=infinite problem %} {% capture infinite analysis %} 考え方 • 500円玉をできるだけ使ったときの不足額は • この不足額を 1円玉 A 枚で埋められるか（ ） {% endcapture %} {% include panel.html type=\"steps\" title=\"🔍 分析\" content=infinite anal"
  },
  {
    "url": "/competitive_programming_book/src/chapter-basic-algorithms/",
    "title": "第5章：基本アルゴリズムの道具箱",
    "content": "<! 本章は「中学生向け競技プログラミング入門書」の一部であり、 CC BY NC SA 4.0ライセンスの下で提供されます。 商用利用は事前許諾が必要です。 詳細：../../LICENSE.md 第5章：基本アルゴリズムの道具箱 章の学習目標 この章を読み終わることで、以下ができるようになります： 全探索による確実な問題解決ができるようになる 複雑な条件分岐を整理して実装できるようになる 数学的な公式・性質を問題解決に活用できるようになる 文字列処理の基本パターンをマスターできるようになる ソートを効果的に使った問題解決ができるようになる 貪欲法による最適化問題の解法を理解できるようになる 入出力処理をマスターした君は、いよいよ問題解決の「道具」を手に入れる段階に来た。大工さんが金槌やのこぎりを使って家を建てるように、プログラマーはアルゴリズムという道具を使って問題を解決する。この章では、競技プログラミングで最もよく使われる基本的な道具たちを学ぼう。 5.1 全探索（しらみつぶし）で解いてみよう 全探索の考え方（Scratchとの関連） 全探索（Brute Force）は、最もシンプルで確実なアルゴリズムだ。「全ての可能性を試して、条件に合うものを見つける」という、とても素直な考え方だ。 全探索が有効な条件 全探索は確実だが、時間がかかる方法でもある。いつ使うべきかを理解しよう： 具体的な全探索の実装 各桁の和を求める処理の詳細 上記のコードで重要な部分である「各桁の和」の計算について、詳しく理解しよう： より複雑な全探索の例 <figure <img src=\"{{ '/assets/diagrams/generated/ch5 bruteforce.svg' | relative url }}\" alt=\"図5 x：全探索の基本フロー\" <figcaption 図5 x：全探索の基本フロー</figcaption </figure 【図5 5：二重ループによる全探索】 問題例：「N個の数から2つ選んで、その和がKになる組み合わせの個数を求める」 入力例： 4 7 1 3 4 6 出力例： 2 解法分析： {% capture plan %} 全ての i < j の組を調べる arr[i] + arr[j] == k を満たす組をカウント {% endcapture %} {% include panel.html type=\"plan\" title=\"🎯 方針\" content=plan %} {% capture steps %} 1. i と j の全組合せ（i < j）を列挙 2. 和が k か判定 3. 条件を満たす組をカウント {% endcapture %} {% include panel.html type=\"steps\" title=\"📝 手順\" content=steps %} {% capture examples %} • (0,1): 1+3=4 ≠ 7 • (0,3): 1+6=7 = 7 ✅ • (1,2): 3+4=7 = 7 ✅ → 合計: 2個 {% endcapture %} {% include panel.html type=\"info\" title=\"🔍 具体例\" content=examples %} 実装： <figure class=\"pseudocode\" <figcaption 二重ループによる全探索（Python）</figcaption </figure 💡 重要なポイント： • range(i + 1, n) により、i < j を保証 • これで重複や同じ要素の組み合わせを避けられる • 計算量は O(N^2) N個から2つ選ぶ組み合わせ 5.2 条件分岐で場合分けしよう 複雑な条件分岐の整理法 競技プログラミングでは、複数の条件が組み合わさった複雑な場合分けが必要になることがある。整理して考える方法を学ぼう。 【図5 6：条件分岐の段階的構築】 問題例：「点数に応じて成績を判定」 90点以上：A, 80点以上：B, 70点以上：C, 60点以上：D, 未満：F <figure class=\"pseudocode\" <figcaption 悪い例（冗長な条件）</figcaption <pre <code class=\"language python\" if score &gt;= 90: grade = \"A\" elif score &gt;= 80 and score &lt; 90: 不要な条件 grade = \"B\" elif score &gt;= 70 and score &lt; 80: 不要な条件 grade = \"C\" elif score &gt;= 60 and score &lt; 70: 不要な条件 grade = \"D\" else: grade = \"F\"</code </pre </figure <figure class=\"pseudocode\" <figcaption 良い例（段階的な条件分岐）</figcaption <pre <code class=\"language python\" if score &gt;= 90: grade = \"A\" elif score &gt;= 80: 既に90未満が確定 grade = \"B\" elif score &gt;= 70: 既に80未満が確定 grade = \"C\" elif score &gt;= 60: 既に70未満が確定 grade = \"D\" else: 60未満 grade = \"F\"</code </pre </figure {% capture cond points %} • elif では前の条件が偽であることが保証される • 冗長な上限条件は不要（流れで確定） • 上から順に条件を評価する設計を意識 {% endcapture %} {% include panel.html type=\"info\" title=\"💡 ポイント\" content=cond points %} 複雑な論理演算の活用 【図5 7：論理演算子の効果的な使用】 {% capture logic ops %} 基本的な論理演算子 • and: 両方が真の場合に真 • or: どちらかが真の場合に真 • not: 真偽を反転 {% endcapture %} {% include panel.html type=\"steps\" title=\"論理演算子の基本\" content=logic ops %} <figure class=\"pseudocode\" <figcaption 実践例：うるう年の判定（2通り）</figcaption <pre <code class=\"language python\" 複雑だが正確な条件 year = int(input()) if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): print(\"うるう年\") else: print(\"平年\") より分かりやすい段階的判定 if year % 400 == 0: print(\"うるう年\") elif year % 100 == 0: print(\"平年\") elif year % 4 == 0: print(\"うるう年\") else: print(\"平年\")</code </pre </figure 場合分けの可視化技法 複雑な条件分岐は、表や図で整理すると理解しやすい： 【図5 8：条件分岐の表による整理】 {% capture pat list %} 可能なパターン（6通り） • a ≥ b ≥ c → a b c • a ≥ c ≥ b → a c b • b ≥ a ≥ c → b a c • b ≥ c ≥ a → b c a • c ≥ a ≥ b → c a b • c ≥ b ≥ a → c b a {% endcapture %} {% include panel.html type=\"info\" title=\"大小関係の6パターン\" content=pat list %} <figure class=\"pseudocode\" <figcaption 実装方法1: 全パターンを条件分岐</figcaption <pre <code class=\"language python\" a, b, c = map(int, input().split()) if a &gt;= b &gt;= c: print(a, b, c) elif a &gt;= c &gt;= b: print(a, c, b) elif b &gt;= a &gt;= c: print(b, a, c) elif b &gt;= c &gt;= a: print(b, c, a) elif c &gt;= a &gt;= b: print(c, a, b) else: c &gt;= b &gt;= a print(c, b, a)</code </pre </figure <figure class=\"pseudocode\" <figcaption 実装方法2: ソートを活用（推奨）</figcaption <pre <code class=\"language python\" a, b, c = map(int, input().split()) numbers = [a, b, c] numbers.sort(reverse=True) 降順 print( numbers)</code </pre </figure {% capture learn pts %} • 複雑な条件分岐は、より簡潔な手段がないか検討 • ソート等の既存機能を積極活用 • 練習として愚直な分岐を書くのも有用 {% endcapture %} {% include panel.html type=\"steps\" title=\"💡 学習ポイント\" content=learn pts %} 5.3 数学の公式を使ってみよう 最大公約数（GCD）の理解と実装 数学の知識は競技プログラミングで非常に重要だ。特に最大公約数は頻出なので、しっかりマスターしよう。 【図5 9：ユークリッドの互除法の理解】 <figure class=\"pseudocode\" <figcaption 反復版（ユークリッドの互除法）</figcaption <pre <code class=\"language python\" def gcd(a, b): while b != 0: a, b = b, a % b return a print(gcd(48, 18)) 6</code </pre </figure {% capture gcd principle %} 💡 原理 gcd(a, b) = gcd(b, a % b)（b=0で停止） {% endcapture %} {% include panel.html type=\"info\" title=\"アルゴリズムの原理\" content=gcd principle %} 【図5 10：GCDの実装と応用】 <figure class=\"pseudocode\" <figcaption 基本実装（ユークリッドの互除法）</figcaption <pre <code class=\"language python\" def gcd(a, b): while b: a, b = b, a % b return a print(gcd(48, 18)) 6 print(gcd(17, 13)) 1（互いに素）</code </pre </figure <figure class=\"pseudocode\" <figcaption 標準ライブラリの利用</figcaption <pre <code class=\"language python\" import math print(math.gcd(48, 18)) 6 from functools import reduce numbers = [48, 18, 24] print(reduce(math.gcd, numbers)) 6</code </pre </figure <figure class=\"pseudocode\" <figcaption LCM（最小公倍数）と活用例</figcaption <pre <code class=\"language python\" def lcm(a, b): return (a b) // gcd(a, b) lcm gcd = a b print(lcm(48, 18)) 144 分数 a/b の約分 a, b = map(int, input().split()) g = math.gcd(a, b) print(a // g, b // g) 2つの周期が同時に起こる時刻 a, b = map(int, input().split()) print(lcm(a, b))</code </pre </figure 素数判定と素数の性質 【図5 11：効率的な素数判定】 <figure class=\"pseudocode\" <figcaption 素朴な素数判定（O(n)）</figcaption <pre <code class=\"language python\" def is prime simple(n): if n < 2: return False for i in range(2, n): if n % i == 0: return False return True</code </pre </figure <figure class=\"pseudocode\" <figcaption 改良版：√n までチェック（O(√n)）</figcaption <pre <code class=\"language python\" import math def is prime(n): if n < 2: return False if n == 2: return True if "
  },
  {
    "url": "/competitive_programming_book/src/chapter-basic-data-structures/",
    "title": "第6章：データ構造を理解して活用しよう",
    "content": "<! 本章は「中学生向け競技プログラミング入門書」の一部であり、 CC BY NC SA 4.0ライセンスの下で提供されます。 商用利用は事前許諾が必要です。 詳細：../../LICENSE.md 第6章：データ構造を理解して活用しよう 6.1 リスト（配列）を使いこなそう 第5章では基本的なアルゴリズムを学んだね。今度は、それらのアルゴリズムを効率的に実行するための「データ構造」について学ぼう。データ構造とは、プログラムの中でデータを整理して保存する「入れ物」のようなものだ。 まずは、Pythonで最もよく使われるリスト（配列）から始めよう。 【図6 1：リストの基本概念とメモリ構造】 {% include panel.html type=\"info\" title=\"リストとは\" content=\"複数のデータを順番に並べて保存できる入れ物（順序・重複・異種型OK／追加・削除・変更が可能）\" %} python 作成と初期化の例 empty list = [] fruits = [\"apple\", \"banana\", \"cherry\"] numbers = [1, 2, 3, 4, 5] zeros = [0] 5 matrix = [[0] 3 for in range(2)] python numbers = [10, 25, 7, 33, 2] print(numbers[0]) 10 print(numbers[ 1]) 2 print(numbers[1:4]) [25, 7, 33] python fruits = [\"apple\", \"banana\"] fruits.append(\"cherry\") fruits.insert(1, \"orange\") fruits.extend([\"grape\", \"melon\"]) python numbers = [10, 25, 7, 33, 2, 25] 値を指定して削除（最初の1件） numbers.remove(25) print(numbers) [10, 7, 33, 2, 25] インデックスを指定して削除 del numbers[0] print(numbers) [7, 33, 2, 25] 末尾要素を削除して取得 last = numbers.pop() print(last) 25 print(numbers) [7, 33, 2] 要素の変更 numbers[0] = 100 print(numbers) [100, 33, 2] 二次元リスト（表形式データ）の活用 python grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] python print(grid[0][0]) 1 print(grid[1][2]) 6 print(grid[2][1]) 8 python 方法1: 直接作成 matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] 方法2: 内包表記（推奨） rows, cols = 3, 4 matrix = [[0 for in range(cols)] for in range(rows)] [[0,0,0,0],[0,0,0,0],[0,0,0,0]] 方法3: 値を入力しながら作成 matrix = [] for i in range(3): row = list(map(int, input().split())) matrix.append(row) ❌ 危険: 参照共有で意図せず同時更新 wrong = [[0] 3] 3 python 全要素への処理 for i in range(len(matrix)): for j in range(len(matrix[i])): print(f\"({i},{j}): {matrix[i][j]}\") より Pythonic な書き方 for i, row in enumerate(matrix): for j, value in enumerate(row): print(f\"({i},{j}): {value}\") 行ごとの処理 for row in matrix: print(sum(row)) 各行の合計 列ごとの処理 for j in range(len(matrix[0])): col sum = sum(matrix[i][j] for i in range(len(matrix))) print(col sum) 各列の合計 競技プログラミングでのリスト活用例 【図6 4：実際の問題でのリスト活用パターン】 {% include panel.html type=\"info\" title=\"問題例1: 配列の最大値・最小値（概要）\" content=\"N個の整数が与えられる。最大値と最小値を出力せよ。入力例: 5 / 3 1 4 1 5\" %} <figure class=\"pseudocode\" <figcaption 実装（max/min の活用）</figcaption </figure {% include panel.html type=\"steps\" title=\"ポイント\" content=\"リストに格納してから処理／組み込み関数 max(), min() を活用\" %} {% include panel.html type=\"info\" title=\"問題例2: 累積和の計算（概要）\" content=\"配列の各要素について、その位置までの累積和を求める。例: [1,2,3,4,5] → [1,3,6,10,15]\" %} <figure class=\"pseudocode\" <figcaption 実装（累積和）</figcaption </figure {% include panel.html type=\"steps\" title=\"応用\" content=\"累積和配列を作れば区間和を O(1) で計算可能\" %} {% include panel.html type=\"info\" title=\"問題例3: 二次元グリッドの探索（概要）\" content=\"H×W のグリッドで、' ' の隣接する '.' の個数を数える。上下左右の4方向を探索\" %} <figure class=\"pseudocode\" <figcaption 実装（グリッド探索）</figcaption </figure 6.2 辞書（ディクショナリ）で高速検索 リストは順番にデータを管理するのに適しているが、「特定の値を高速で検索したい」「データに名前を付けて管理したい」という場合には、辞書（ディクショナリ）が威力を発揮する。 辞書の基本操作をマスターしよう 【図6 6：辞書操作の完全ガイド】 {% include panel.html type=\"steps\" title=\"辞書の作成方法\" content=\"空の作成: {} / dict()／リテラルで作成／dict()のキーワード引数／ペアのリストから作成\" %} {% include panel.html type=\"steps\" title=\"要素へのアクセスと操作\" content=\"[] と get()／存在しないキー時の既定値／値の変更・追加／削除(pop/del)\" %} {% include panel.html type=\"steps\" title=\"辞書の反復処理\" content=\"keys/values/items の使い分け／for での標準反復はキー列挙\" %} 競技プログラミングでの辞書活用パターン python text = \"programming\" char count = {} for char in text: char count[char] = char count.get(char, 0) + 1 for char, count in char count.items(): print(f\"{char}:{count}\") 簡潔版（標準ライブラリ） from collections import Counter print(dict(Counter(text))) python students = [(\"Alice\", \"8th\"), (\"Bob\", \"7th\"), (\"Charlie\", \"8th\")] 通常の辞書版 groups = {} for name, grade in students: if grade not in groups: groups[grade] = [] groups[grade].append(name) print(groups) {\"8th\": [\"Alice\", \"Charlie\"], \"7th\": [\"Bob\"]} defaultdict 版 from collections import defaultdict groups = defaultdict(list) for name, grade in students: groups[grade].append(name) python allowed users = {\"alice\", \"bob\", \"charlie\", \"david\"} def is allowed(user id): return user id in allowed users True/False を高速判定 print(is allowed(\"alice\")) True print(is allowed(\"eve\")) False リスト比較（遅い: O(N)） allowed list = [\"alice\", \"bob\", \"charlie\", \"david\"] def is allowed slow(user id): return user id in allowed list python def fibonacci slow(n): if n <= 1: return n return fibonacci slow(n 1) + fibonacci slow(n 2) memo = {} def fibonacci fast(n): if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci fast(n 1) + fibonacci fast(n 2) return memo[n] 効果の例 fibonacci slow(30) は数秒、fibonacci fast(30) は瞬時 6.3 集合（セット）で重複を管理 データを扱っていると、「重複する要素を除去したい」「2つのグループの共通部分を知りたい」といった場面に遭遇する。そんなときに威力を発揮するのが、集合（セット）だ。 【図6 8：集合の基本概念と数学的背景】 {% include panel.html type=\"info\" title=\"集合の特徴\" content=\"重複なし／順序なし（インデックス不可）／存在確認が高速（O(1)）／集合演算が可能（和・積・差・対称差）\" %} 集合の基本操作 【図6 9：集合操作の完全ガイド】 {% include panel.html type=\"steps\" title=\"作成パターン\" content=\"空は set()（{} は辞書）／リテラル {…}／リストや文字列から set(…) で作成\" %} {% include panel.html type=\"steps\" title=\"追加・削除の基本\" content=\"add／update（複数）／remove（無いと例外）／discard（無視）／pop（任意の1要素）／clear\" %} {% include panel.html type=\"steps\" title=\"存在確認・サイズ・反復\" content=\"in で高速存在確認／len で要素数／for で列挙／内包表記でフィルタ\" %} 集合演算の活用 【図6 10：集合演算による高度なデータ処理】 {% include panel.html type=\"steps\" title=\"基本的な集合演算\" content=\"和集合 A|B／積集合 A&B／差集合 A B／対称差 A^B（いずれもメソッド有）\" %} {% include panel.html type=\"steps\" title=\"集合関係の判定\" content=\"部分集合 issubset／上位集合 issuperset／素集合 isdisjoint（共通要素なし）\" %} 競技プログラミングでの集合活用例 【図6 11：集合を使った効率的な解法例】 {% include panel.html type=\"info\" title=\"問題例1: 共通要素の発見（概要）\" content=\"2つのリストの共通要素を出力。集合の積集合で O(N+M) に高速化\" %} {% include panel.html type=\"steps\" title=\"問題例2: 重複除去と順序保持\" content=\"集合で既出判定しながら結果リストに追加\" %} {% include panel.html type=\"steps\" title=\"問題例3: グループの分類\" content=\"和・積・差で4群に分解（両方／数学のみ／英語のみ／どちらも普通）\" %} 6.4 スタックとキューの考え方 データ構造の中でも、特に「データの取り出し順序」が重要な役割を果たすのが、スタックとキューだ。これらは、プログラムでよく使われる「後入れ先出し」と「先入れ先出し」という概念を具現化したものだ。 Pythonでのスタック実装 python スタックの作成 stack = [] 要素の追加（push） stack.append(1) stack.append(2) stack.append(3) print(stack) [1, 2, 3] 要素の取り出し（pop） top = stack.pop() print(top) 3（最後に追加した要素） print(stack) [1, 2] 先頭要素の確認（取り出さない） if"
  },
  {
    "url": "/competitive_programming_book/src/chapter-community/",
    "title": "第11章：仲間と一緒に成長しよう",
    "content": "<! 本章は「中学生向け競技プログラミング入門書」の一部であり、 CC BY NC SA 4.0ライセンスの下で提供されます。 商用利用は事前許諾が必要です。 詳細：../../LICENSE.md 第11章：仲間と一緒に成長しよう 11.1 中学生向けの競技・イベント 第10章でコンテスト参加の方法を学んだね。でも、大人と一緒に競技をするより、同世代の仲間と切磋琢磨できる機会があったら、もっと楽しく成長できるよね。中学生が参加できる特別な競技やイベントを紹介しよう。 【図11 1：中学生が参加できる主要競技・イベント】 {% capture ajl overview %} 🥇 AtCoder Junior League（AJL） 開催: 年数回（不定期）／対象: 中学生以下／時間: ABCと同じ100分 {% endcapture %} {% include panel.html type=\"info\" title=\"AJL 概要\" content=ajl overview %} {% capture ajl points %} 特徴 • 通常レーティングとは別計算／同世代での純粋な競争 • 参加者が少なく上位を狙いやすい／企業からの注目度も高い メリット • 年齢ハンデなし／同世代の実力把握／自信とモチベ向上 • 将来の仲間と出会える／メディア取材の可能性 {% endcapture %} {% include panel.html type=\"steps\" title=\"AJL 特徴とメリット\" content=ajl points %} {% capture joi sched %} 🎌 日本情報オリンピック（JOI） 年間スケジュール: 12月 予選（オンライン）→ 2月 本選（会場）→ 3–4月 春季合宿 → 7月 IOI {% endcapture %} {% include panel.html type=\"info\" title=\"JOI 概要/スケジュール\" content=joi sched %} {% capture joi targets %} 現実的目標と状況 • 予選参加者 ~5,000／中学生の予選通過 ~50／本選 ~50／春季合宿 ~10／IOI代表は稀 挑戦プラン • 1年目: 予選参加で形式に慣れる • 2年目: 予選で部分点獲得 • 3年目: 予選通過を本格的に狙う 対策 • AtCoderのC/D問題レベルを習得 • 過去問で傾向把握 • アルゴリズムを体系的に学ぶ {% endcapture %} {% include panel.html type=\"steps\" title=\"JOI 目標/プラン/対策\" content=joi targets %} 地域・学校レベルでの競技機会 【図11 2：身近な競技機会の発見と活用】 {% capture school local %} 🏫 学校・地域の機会 • 校内コンテスト（文化祭/部活/課外活動） • 市町村主催の大会／図書館講座／地域IT企業のイベント {% endcapture %} {% include panel.html type=\"steps\" title=\"学校・地域\" content=school local %} {% capture online youth %} 🌐 オンライン中高生大会 • 企業主催の学生限定コンテスト • 大学主催の体験イベント • NPOの教育プログラム {% endcapture %} {% include panel.html type=\"steps\" title=\"オンライン\" content=online youth %} {% capture tips join %} 💡 参加のコツ • 完璧を求めずまず参加 • 同世代との交流を重視 • 大人のアドバイスを積極的に • 結果より学習体験を大切に {% endcapture %} {% include panel.html type=\"info\" title=\"参加のコツ\" content=tips join %} {% capture path ioi %} 🚀 国際レベルへの道筋（概観） • IOI代表への一般的な特徴/流れ/メリット/心構えはJOIの延長線上 • 詳細は11.1/JOI節と後続節で整理 {% endcapture %} {% include panel.html type=\"plan\" title=\"国際への道\" content=path ioi %} 成功事例：同世代の先輩たち 【図11 3：中学生競技プログラマーの成功パターン】 🌟 実際の成功事例パターン {% capture pA info %} パターンA：「コツコツ継続型」 プロフィール: 中1からAtCoder開始／毎日1時間継続／3年で緑到達 成長軌跡: 1年目 グレー→茶（基礎）→ 2年目 茶→緑（応用）→ 3年目 緑安定（発展） {% endcapture %} {% include panel.html type=\"info\" title=\"パターンA 概要\" content=pA info %} {% include panel.html type=\"steps\" title=\"Aの成功要因\" content=\"無理のない継続／基礎重視／復習で定着／趣味とのバランス\" %} {% capture pB info %} パターンB：「集中特化型」 プロフィール: 中2から開始／短期集中でレベルアップ／1年半で水色 成長軌跡: 3ヶ月 グレー→茶（急速習得）→ 6ヶ月 茶→緑（定着）→ 9ヶ月 緑→水（高度挑戦） {% endcapture %} {% include panel.html type=\"info\" title=\"パターンB 概要\" content=pB info %} {% include panel.html type=\"steps\" title=\"Bの成功要因\" content=\"強い目標意識／効率的学習法／メンター指導／競争相手の存在\" %} {% capture pC info %} パターンC：「コミュニティ活用型」 プロフィール: 部活設立／仲間と成長／チームで茶色達成 成長軌跡: 立ち上げ→勉強会→外部大会→学校発表/LT {% endcapture %} {% include panel.html type=\"info\" title=\"パターンC 概要\" content=pC info %} {% include panel.html type=\"steps\" title=\"Cの成功要因\" content=\"教え合いで学ぶ／役割分担と目標設定／外部イベントで刺激\" %} 11.2 オンラインコミュニティを活用しよう 一人で学習を続けるのは大変だが、オンラインコミュニティを上手に活用すれば、世界中の仲間と一緒に成長できる。安全で建設的なコミュニティ参加の方法を学ぼう。 【図11 4：推奨オンラインコミュニティと参加方法】 {% capture discord info %} 💬 AtCoder公式Discord 主な活動: コンテスト実況/感想、解法議論（終了後）、学習相談、初心者Q&A、雑談 {% endcapture %} {% include panel.html type=\"info\" title=\"AtCoder公式Discord（概要）\" content=discord info %} {% capture discord manners %} 参加マナー • 実名を避け、AtCoder IDを使用 • コンテスト中のネタバレ禁止 • 質問前に過去ログ検索 • 礼儀正しく建設的に • 年齢公開は保護者同意を確認 {% endcapture %} {% include panel.html type=\"steps\" title=\"Discordのマナー\" content=discord manners %} {% capture discord channels %} 初心者におすすめ • general（一般）／ beginners（初心者質問） • study group（学習グループ） • contest talk（感想共有） {% endcapture %} {% include panel.html type=\"steps\" title=\"推奨チャンネル\" content=discord channels %} {% include panel.html type=\"warn\" title=\"Discordの注意\" content=\"個人情報（本名/学校/住所）NG／写真投稿は慎重に／怪しいDMは無視\" %} {% capture x follow %} 🐦 X（旧Twitter） フォロー対象: AtCoder公式／有名競技勢／解説を書く中級者／同世代／学習アカウント {% endcapture %} {% include panel.html type=\"steps\" title=\"Xでの情報収集\" content=x follow %} {% capture x benefits %} 得られる情報 • コンテスト告知／解法記事のシェア • 学習Tips／モチベ維持／技術トレンド {% endcapture %} {% include panel.html type=\"info\" title=\"Xのメリット\" content=x benefits %} {% capture x post %} 発信のコツ • 学習記録の定期投稿／達成の共有 • 躓きと解決の記録／同世代への励まし {% endcapture %} {% include panel.html type=\"steps\" title=\"Xでの発信\" content=x post %} {% include panel.html type=\"warn\" title=\"Xの注意\" content=\"個人情報は投稿しない／批判的投稿は控える／真偽確認の習慣／ネガティブ投稿は一晩置く\" %} 技術ブログ・情報発信の活用 【図11 5：技術ブログ・Qiitaでの学習と発信】 {% capture read types %} 読むべき記事 • 問題解説（解法理解）／アルゴリズム解説（理論） • 学習方法の体験談（モチベ）／エラー対処（Tips） • 中学生の成功事例（同世代の体験談） {% endcapture %} {% include panel.html type=\"steps\" title=\"情報収集（記事の種類）\" content=read types %} {% capture search tips %} 検索のコツ • 「AtCoder ABC」でタグ検索 • 「競技プログラミング 初心者」 • 解けなかった問題番号で検索 • 「中学生 プログラミング」で体験談 {% endcapture %} {% include panel.html type=\"steps\" title=\"効率的な検索\" content=search tips %} {% capture quality %} 質の見極め • 更新日が新しい／複数記事で照合 • コメント反応も確認 • 実際にコードを試して検証 {% endcapture %} {% include panel.html type=\"info\" title=\"情報の質を見極める\" content=quality %} {% capture write ideas %} 書きやすいネタ • 解けた問題の解法メモ／学習進捗記録 • 躓きと解決方法／ツールや環境紹介／初心者への励まし {% endcapture %} {% include panel.html type=\"steps\" title=\"発信ネタ\" content=write ideas %} {% capture write benefits %} 発信のメリット • 理解の整理と定着／フィードバック獲得 • アウトプット力向上／将来のポートフォリオ • 同レベルとの出会い {% endcapture %} {% include panel.html type=\"info\" title=\"発信のメリット\" content=write benefits %} {% capture write care %} 注意点 • 間違いを恐れず学習過程を共有 • 建設的な内容を心がける • 体験談中心に／画像の個人情報に注意 {% endcapture %} {% include panel.html type=\"warn\" title=\"発信時の注意\" content=write care %} {% capture keep habit %} 継続のコツ • 完璧を目指さない／短くても定期的に • 反応への感謝を忘れない {% endcapture %} {% include panel.html type=\"steps\" title=\"継続のコツ\" content=keep habit %} オンライン学習イベントの活用 【図11 6：参加価値の高いオンラインイベント】 {% capture regular study %} 📚 定期的なオンライン勉強会 • AtCoder Problems 勉強会／アルゴリズム基礎講座 • 中高生向けプログラミング講座／企業技術セミナー 時間帯の例: 土日午前／平日夕方／長期休暇の集中講座 {% endcapture %} {% include panel.html type=\"info\" title=\"オンライン勉強会\" content=regular study %} {% capture attend tips %} 参加のポイント • 事前準備（環境構築・基礎確認）／積極的に質問・発言 • ネットワーキング／学びの記録と復習／感謝を忘れない {% endcapture %} {% include panel.html type=\"steps\" title=\"参加のコツ\" content=attend tips "
  },
  {
    "url": "/competitive_programming_book/src/chapter-contest-participation/",
    "title": "第10章：コンテストに参加してみよう",
    "content": "<! 本章は「中学生向け競技プログラミング入門書」の一部であり、 CC BY NC SA 4.0ライセンスの下で提供されます。 商用利用は事前許諾が必要です。 詳細：../../LICENSE.md 第10章：コンテストに参加してみよう 10.1 初回参加の準備をしよう 第9章でエラー対応の技術を身につけた君は、もう実際のコンテストに参加する準備ができている。でも初回参加は誰でも緊張するもの。しっかりと準備をして、安心してコンテストを楽しもう。 【図10 1：初回コンテスト参加への完全準備ガイド】 {% capture wk prep %} 📚 技術的準備 • ABC過去のA問題を10問以上解く • 基本的な入出力パターンの復習 • よく使うPython構文の整理 • エディタ設定の確認と動作テスト 🧠 心理的準備 • 「楽しむ」が最優先のマインドセット • 1問でも解けたら成功 • 他人と比較しない • 学習機会として捉える 📝 事前学習リスト □ input()/int()/split() □ print() □ if/for の基本 □ リストの基本操作 □ 簡単な計算処理 {% endcapture %} {% include panel.html type=\"steps\" title=\"🗓️ 参加1週間前の準備\" content=wk prep %} {% capture eve prep %} 🖥️ 環境整備 • PCの動作確認（再起動/アップデート） • ネット接続の安定性確認 • Python・エディタの最終テスト • AtCoderログイン確認 📋 物理的準備 • 十分な睡眠（最低7時間） • 水分・軽食の準備 • 静かな環境の確保 • スマートフォンをマナーモード 🎯 最終目標設定 • A問題正解を第一目標 • B問題理解を第二目標 • 最後まで諦めないを必須目標 • 楽しむことを最重要目標 {% endcapture %} {% include panel.html type=\"plan\" title=\"📅 参加前日の準備\" content=eve prep %} 初回参加の心理的ハードルを下げるコツ 【図10 2：よくある不安と現実・対処法】 {% capture anxiety pairs %} • 「1問も解けなかったら恥ずかしい…」 → 多くの初心者はA問題を解ける／完璧は不要 • 「他の人と比べてレベルが低い…」 → 最初は同じスタート／成長過程を楽しむ • 「時間内に解き切れない…」 → 全問は上級者でも困難／1問でも解けたら成功 • 「エラーが出たら…」 → 第9章の力を活用／落ち着いて原因分析 {% endcapture %} {% include panel.html type=\"info\" title=\"😰 不安 → 🤗 現実・対処法\" content=anxiety pairs %} {% capture success criteria %} ✅ A問題を1問でも解けた → 大成功！ ✅ 問題文を理解できた → 良いスタート！ ✅ 最後まで諦めずに参加 → 継続力の証明！ ✅ 楽しめた → 最も重要な成功！ {% endcapture %} {% include panel.html type=\"steps\" title=\"💡 初回参加の成功基準\" content=success criteria %} コンテスト当日のタイムライン 【図10 3：コンテスト当日の理想的スケジュール】 {% capture pre check2 %} ✅ 最終環境チェック • PC/ネットワークの動作 • AtCoderログイン • エディタ/ブラウザ起動 • 参照サイトをブックマーク 🧘 心の準備 • 深呼吸×3／楽しむ宣言 • 緊張を良いエネルギーに • 完璧より学び {% endcapture %} {% include panel.html type=\"steps\" title=\"🕒 開始前 (20:30–20:45)\" content=pre check2 %} {% capture standby2 %} 🎯 メンタル調整 • 緊張はほどほど／基礎文法を軽く復習 • input()/print() を確認 • 水分補給・トイレ ⚠️ やらない • 新概念学習／難問挑戦 • SNS/動画 • ネガティブ情報 {% endcapture %} {% include panel.html type=\"info\" title=\"🕒 待機 (20:45–21:00)\" content=standby2 %} {% capture start2 %} 🚀 開始直後（最初の5分） • A問題の読解／サンプル理解／解法イメージ 💡 成功の秘訣 • 15分でAをAC • 余り時間でB挑戦 • 切替の判断／数より質 {% endcapture %} {% include panel.html type=\"plan\" title=\"🕘 21:00 コンテスト開始\" content=start2 %} 10.2 コンテスト中の行動パターン 実際のコンテストでは、学習時とは違った時間制限のプレッシャーがある。効率的な行動パターンを身につけることで、持っている実力を最大限発揮できるようになる。 【図10 4：コンテスト中の標準作業フロー】 📖 問題読解フェーズ（3–5分） {% capture read phase %} Step 1: 問題文の理解 • 何を求める問題かを明確化 • 入力/出力形式の確認 • 制約条件の把握 • 重要キーワードにマーカー Step 2: サンプル分析 • 入力→出力の変換過程を手で追う • なぜその出力かを理解 • 解法アイデアを複数考える • 最もシンプルな方法を選択 Step 3: 実装方針の決定 • 使用するアルゴリズム/データ構造 • コードの大まかな構造 • 想定実装時間とリスクの予測 {% endcapture %} {% include panel.html type=\"steps\" title=\"標準作業フロー：読解→分析→方針\" content=read phase %} ⌨️ 実装フェーズ（5–10分） {% capture impl order %} 1. 入出力処理 2. メインロジックの骨組み 3. 詳細処理 4. デバッグ用 print の挿入 {% endcapture %} {% include panel.html type=\"steps\" title=\"効率的な実装順序\" content=impl order %} {% capture impl tips %} • 意味が伝わる短い変数名 • 複雑な処理は小関数に分割 • サンプルを追跡しながら実装 • 完璧より「まず動く」 {% endcapture %} {% include panel.html type=\"info\" title=\"実装中のコツ\" content=impl tips %} {% capture impl anti %} • 一度に全てを書こうとする • 複雑すぎる一行コード • デバッグ困難な構造 • 意味不明な変数名 {% endcapture %} {% include panel.html type=\"warn\" title=\"避けるべき実装\" content=impl anti %} 🧪 検証フェーズ（2–3分） {% capture verify checks %} ✅ 必須チェック • サンプルでの動作 • 出力形式（改行/スペース） • 境界値（最小/最大） • 文法エラーの確認 {% endcapture %} {% include panel.html type=\"steps\" title=\"検証チェックリスト\" content=verify checks %} {% capture verify debug %} 🔧 デバッグが必要な場合 • printで中間値を確認 • 手動計算と照合 • ロジック見直し • シンプル解法へ切替も検討 {% endcapture %} {% include panel.html type=\"plan\" title=\"デバッグの進め方\" content=verify debug %} {% capture verify tips %} 💡 検証のポイント • エラーメッセージを冷静に読む • 第9章のエラー対応力を活用 • 時間配分に合わせた判断 {% endcapture %} {% include panel.html type=\"info\" title=\"検証のコツ\" content=verify tips %} 🚀 提出フェーズ（1分） {% capture submit pre %} 📤 提出前の最終確認 • 言語は「Python (CPython 3.x)」 • デバッグ用 print を削除 • コード全体を正しくコピー {% endcapture %} {% include panel.html type=\"steps\" title=\"提出前チェック\" content=submit pre %} {% capture submit post %} 🎯 提出後の行動 • ジャッジ結果を冷静に待つ • AC → 次の問題へ • WA → 第9章の対処法 • TLE → 高速化を検討 {% endcapture %} {% include panel.html type=\"plan\" title=\"提出後の行動\" content=submit post %} {% capture submit mind %} 💡 心構え • 一発ACを目指すが失敗を恐れない • 提出から学ぶ • 常に時間配分を意識 {% endcapture %} {% include panel.html type=\"info\" title=\"心構え\" content=submit mind %} 時間配分戦略 【図10 5：100分コンテストの効率的時間配分】 {% capture talloc a %} 目標：A問題を確実にAC ⏱️ 配分 • 読解 2分 / 実装 3分 / 検証・提出 2分 / 予備 8分 戦略 • 焦らず確実に／サンプルで動作確認 • 1回目ACを狙う／A問題で「貯金」を作る {% endcapture %} {% include panel.html type=\"steps\" title=\"🕘 開始–15分：A問題攻略期\" content=talloc a %} {% capture talloc b %} 目標：B問題をAC または Cの土台 ⏱️ 配分 • 読解 5分 / 検討 5分 / 実装 8分 / デバッグ 2分 戦略 • 15分で見切り／Cへ時間配分 • 部分点でも提出／「実力の見せ所」 {% endcapture %} {% include panel.html type=\"plan\" title=\"🕘 15–35分：B問題攻略期\" content=talloc b %} {% capture talloc c %} 目標：C問題に挑戦（解けなくてもOK） ⏱️ 配分 • 読解 10分 / 設計 15分 / 実装・デバッグ 25分 戦略 • 理解を深める／部分点狙いも有効 • 難しければA,B見直しへ回帰／「成長への挑戦」 {% endcapture %} {% include panel.html type=\"info\" title=\"🕘 35–85分：C問題挑戦期\" content=talloc c %} {% capture talloc review %} 目標：見直しと追加AC ⏱️ 配分 • A,Bの再確認 5分 / 最後のチャレンジ 10分 戦略 • 既存ACを失わない • 新規より部分点改善を優先 • 最終提出は慎重に／次回の学びをメモ {% endcapture %} {% include panel.html type=\"steps\" title=\"🕘 85–100分：見直し・追加挑戦期\" content=talloc review %} 実戦での判断力 {% capture decision good %} 状況：AはAC、Bで15分経過で停滞 ✅ 良い判断 • Bを一旦諦めてCを見る • Cの方が適性ある可能性 • 時間の有効活用 {% endcapture %} {% include panel.html type=\"steps\" title=\"🤔 問題選択の判断（良い例）\" content=decision good %} {% capture decision bad %} ❌ 悪い判断 • Bに固執し続ける • 時間を浪費する可能性 • 他問題への挑戦機会を失う {% endcapture %} {% include panel.html type=\"warn\" title=\"避けたい判断（悪い例）\" content=decision bad %} {% capture decision criteria %} 💡 判断基準 • 15分考えて方向性が見えない → 切り替え • 実装はできそうだが時間がかかる → 継続 • 全く理解できない → 切り替え {% endcapture %} {% include panel.html type=\"info\" title=\"判断の基準\" content=decision criteria %} {% capture debug judgement %} 状況：実装完了だがWAの原因が不明 ✅ 効率的なデバッグ 1. 出力形式を確認（1分） 2. サンプルで手動追跡（2分） 3. 簡単なエッジケース（2分） 4. 5分で解決しなければ他問題へ ❌ 非効率 • 同じコードを長時間眺める／根拠ない修正を繰り返す／完璧主義 💡 コツ • デバッグは投資、時間対効果を意識 • 別問題で視点転換、後で戻る余地を残す {% endcapture %} {% include panel.html type=\"plan"
  },
  {
    "url": "/competitive_programming_book/src/chapter-debugging/",
    "title": "第9章：エラーと上手に付き合おう",
    "content": "<! 本章は「中学生向け競技プログラミング入門書」の一部であり、 CC BY NC SA 4.0ライセンスの下で提供されます。 商用利用は事前許諾が必要です。 詳細：../../LICENSE.md 第9章：エラーと上手に付き合おう 9.1 よくあるエラーメッセージを覚えよう 第8章では体系的な問題解決プロセスを学んだね。でも実際にプログラムを書いていると、必ずエラーに遭遇する。エラーは敵ではなく、プログラムを正しくするためのヒントをくれる「味方」なんだ。 【図9 1：エラーメッセージとの正しい関係】 {% include panel.html type=\"steps\" title=\"初心者の頃の関係\" content=\"エラー→パニック/諦め→なんとなく修正→別のエラー→無限ループ\" %} {% include panel.html type=\"steps\" title=\"上級者の関係\" content=\"エラー→ヒントと捉える→メッセージ読解→原因特定→的確に修正→解決/スキルアップ\" %} Python競技プログラミングでの頻出エラー TOP5 エラーメッセージの読み方をマスターしよう 9.2 実行時エラーを解決しよう 構文エラーはエディタで気づきやすいけれど、実行時エラーは実際にプログラムを動かしてみないと分からない。でも、パターンを覚えれば対処は意外と簡単なんだ。 【図9 4：実行時エラーの体系的対処法】 🔍 実行時エラーの分類と対策 ❌ ZeroDivisionError（ゼロ除算エラー） {% include panel.html type=\"info\" title=\"原因\" content=\"0で数値を割ろうとした\" %} {% capture z bad %} 🚨 問題のあるコード a = int(input()) b = int(input()) print(a / b) b が 0 の場合エラー {% endcapture %} {% include panel.html type=\"steps\" title=\"問題例\" content=z bad %} {% capture z good %} ✅ 改善されたコード a = int(input()) b = int(input()) if b != 0: print(a / b) else: print(\"0で割ることはできません\") {% endcapture %} {% include panel.html type=\"steps\" title=\"改善例\" content=z good %} {% include panel.html type=\"steps\" title=\"対策\" content=\"除算前に分母0をチェック／入力の妥当性を検証する習慣\" %} ❌ ValueError（値エラー） {% include panel.html type=\"info\" title=\"原因\" content=\"数値に変換できない文字列をintに変換しようとした\" %} {% capture val bad %} 🚨 問題のあるコード text = \"abc\" number = int(text) \"abc\" は数値ではない {% endcapture %} {% include panel.html type=\"steps\" title=\"問題例\" content=val bad %} {% capture val good %} ✅ 改善されたコード text = input() if text.isdigit(): 数字かチェック number = int(text) print(f\"数値: {number}\") else: print(\"数値ではありません\") {% endcapture %} {% include panel.html type=\"steps\" title=\"改善例\" content=val good %} {% include panel.html type=\"steps\" title=\"対策\" content=\"変換前に妥当性を確認／isdigit()などで事前チェック\" %} ❌ TypeError（型エラー） {% include panel.html type=\"info\" title=\"原因\" content=\"異なる型同士で演算した（数値+文字列など）\" %} {% capture type bad %} 🚨 問題のあるコード number = 5 text = \"3\" result = number + text 数値と文字列を足している {% endcapture %} {% include panel.html type=\"steps\" title=\"問題例\" content=type bad %} {% capture type good %} ✅ 改善されたコード number = 5 text = \"3\" result = number + int(text) 文字列→数値に変換 print(result) 8 {% endcapture %} {% include panel.html type=\"steps\" title=\"改善例\" content=type good %} {% include panel.html type=\"steps\" title=\"対策\" content=\"演算前に型を統一／int()/str()/float()で明示的に変換\" %} python 問題のあるコード例 def calculate average(numbers): total = 0 for num in numbers: total += num return total / len(numbers) arr = [10, 20, 30] result = calculate average(arr) print(result) ↓ デバッグ版に改造 def calculate average(numbers): print(f\"Debug: 受け取った配列 = {numbers}\") ①入力確認 total = 0 for i, num in enumerate(numbers): total += num print(f\"Debug: {i+1}回目, num={num}, total={total}\") ②処理過程確認 print(f\"Debug: 最終的なtotal = {total}\") ③中間結果確認 print(f\"Debug: 配列の長さ = {len(numbers)}\") ④計算要素確認 result = total / len(numbers) print(f\"Debug: 計算結果 = {result}\") ⑤最終結果確認 return result python def find max(arr): max val = 0 ⚠️ 初期値が問題 for num in arr: if num max val: max val = num return max val テスト print(find max([3, 1, 4])) 期待:4, 実際:4 ✅ print(find max([ 1, 5, 2])) 期待: 1, 実際:0 ❌ python def find max(arr): max val = arr[0] 最初の要素で初期化 for num in arr[1:]: 2番目から開始 if num max val: max val = num return max val 【図9 8：Wrong Answer の体系的対処法】 {% include panel.html type=\"steps\" title=\"WA分析のフロー\" content=\"1) 出力形式の厳密確認／2) サンプルで手動追跡／3) エッジケース検証／4) 解法の見直し\" %} {% capture fmt mistakes %} ❌ よくある出力形式ミス • 余分な改行: 直後の不要な print() • 区切り違い: sep=','（本来は空白） • 大小文字違い: yes vs Yes • 数値の形式: 小数/整数/桁数の不一致 {% endcapture %} {% include panel.html type=\"warn\" title=\"出力形式チェック\" content=fmt mistakes %} {% capture debug flow %} 🔍 計算ロジック検証（stderr活用） • 入力直後に Debug: n, arr を出す • 計算直後に Debug: result を出す • 提出前にデバッグ文は必ず削除（stderrは影響しないが癖づける） {% endcapture %} {% include panel.html type=\"steps\" title=\"段階的検証\" content=debug flow %} {% capture edge cases %} 🔍 エッジケース網羅 • サイズ: N=1／N=上限（計算量OK?） • 値: 全要素同値／最小・最大境界／負数・ゼロ • 構造: ソート済み/逆順／重複／空/単一 {% endcapture %} {% include panel.html type=\"steps\" title=\"エッジケース\" content=edge cases %} {% capture custom tests %} 📝 自作テストケース例 {% endcapture %} {% include panel.html type=\"steps\" title=\"自作テスト\" content=custom tests %} AtCoder特有のトラブルシューティング 【図9 9：AtCoder提出時のよくある失敗と対策】 {% include panel.html type=\"steps\" title=\"提出前チェック\" content=\"言語がPython (CPython 3.x)／デバッグprintを全削除／コード全体を正しく貼付／サンプルで動作確認／出力形式が完全一致\" %} {% capture submit warn %} 🎯 典型ミス • 言語選択: PyPy/Python2.7 を誤選択 • コピペ: 一部欠落や余分な文字 • デバッグ文残存: Debug 出力が混入 {% endcapture %} {% include panel.html type=\"warn\" title=\"注意\" content=submit warn %} {% include panel.html type=\"steps\" title=\"WA時の段階的対処\" content=\"Phase 1: 出力形式の再確認（改行/空白/大小文字）／Phase 2: サンプル手動追跡／Phase 3: エッジケース検証（境界値）／Phase 4: 解法見直し\" %} 9.5 「Time Limit Exceeded」を解決しよう TLE（Time Limit Exceeded）は、プログラムの実行時間が制限時間を超えた時に出るエラーだ。正しい答えは出るけれど、計算に時間がかかりすぎるということ。 python よくある問題パターン：不要な二重ループ（O(N^2)） count = 0 for i in range(n): for j in range(n): if arr[i] == target: 内側で毎回同じチェック count += 1 改善版：一周で数える（O(N)） count = 0 for x in arr: if x == target: count += 1 python リストでの検索（O(N)）を毎回行う def count occurrences(arr, target): count = 0 for x in arr: if x == target: count += 1 return count 毎回 O(N) の検索が発生 → O(N×M) for target in queries: result = count occurrences(arr, target) 辞書で前処理して O(1) 取得 from collections import Counter counter = Counter(arr) O(N) で前処理 for target in queries: result = counter[target] O(1) python 遅い書き方 result = [] for i in range(n): result.append(str(arr[i])) output = '\\\\n'.join(result) 高速化テクニック（リスト内包表記） result = [str(x) for x in arr] output = '\\\\n'.join(result) さらに高速化 output = '\\\\n'.join(map(str, arr)) 大量出力の場合の最適化 import sys for x in arr: sys.stdout.write(str(x) + '\\\\n') 計算量の見積もりと改善 TLE解決の実践例 python n, k = map(int, input().split()) arr = list(map(int, input().split())) count = 0 for i in range(n): for j in range(i+1, n): if arr[i] arr[j] == k: count += 1 print(count) python from collections import Counter n, k = map(int, input().split()) arr = list(map(int, input().split())) counter = Counter(arr) O(N) count = 0 for num in counter: if k % num == 0: pa"
  },
  {
    "url": "/competitive_programming_book/src/chapter-environment-setup/",
    "title": "第2章：AtCoderへの第一歩",
    "content": "<! 本章は「中学生向け競技プログラミング入門書」の一部であり、 CC BY NC SA 4.0ライセンスの下で提供されます。 商用利用は事前許諾が必要です。 詳細：../../LICENSE.md 第2章：AtCoderへの第一歩 2.1 AtCoderってどんなサイト？ 第1章では競技プログラミングの楽しさや価値について学んだね。今度は実際に、日本最大級の競技プログラミングサイト「AtCoder」を探検してみよう！ AtCoderの特別なところ AtCoderは他の競技プログラミングサイトと比べて、中学生の君にとって特に優れた特徴がある： 世界の中でのAtCoderの位置づけ 【図2 3：世界の競技プログラミングサイト比較】 {% capture world sites left %} 🌍 世界規模（例: Codeforces） • 世界最高峰・上級者向け • 英語UI • 高速な判定／多彩なラウンド {% endcapture %} {% include panel.html type=\"info\" title=\"世界規模サイト\" content=world sites left %} {% capture world sites right %} 🇯🇵 日本特化（AtCoder） • 教育重視・初心者歓迎 • 日本語UI • 公式解説が充実 {% endcapture %} {% include panel.html type=\"info\" title=\"日本特化サイト\" content=world sites right %} {% capture learning flow %} 🔄 学習の流れ AtCoderで基礎固め → 実力向上 → Codeforcesに挑戦（将来の目標） {% endcapture %} {% include panel.html type=\"steps\" title=\"学習パス（推奨）\" content=learning flow %} AtCoderで何ができる？ 【図2 4：AtCoderでできることマップ】 {% capture atcoder map contest %} 🏆 コンテスト • 土日に開催／リアルタイム • 他の参加者と競争／成績反映 {% endcapture %} {% include panel.html type=\"info\" title=\"コンテスト\" content=atcoder map contest %} {% capture atcoder map practice %} 📚 過去問練習 • いつでも利用可能／自分のペース • 苦手分野を集中的に練習 {% endcapture %} {% include panel.html type=\"info\" title=\"過去問練習\" content=atcoder map practice %} {% capture atcoder map comm %} 👥 コミュニティ • 情報交換／解法の議論 • 仲間作り・ネットワーキング {% endcapture %} {% include panel.html type=\"info\" title=\"コミュニティ\" content=atcoder map comm %} {% capture atcoder map outcomes %} 📈 レーティング上昇／💪 スキルアップ／🤝 ネットワーキング {% endcapture %} {% include panel.html type=\"steps\" title=\"得られるもの\" content=atcoder map outcomes %} 2.2 アカウントを作ってみよう いよいよAtCoderのアカウントを作成しよう！手順は簡単だけど、将来のことを考えて慎重に設定していこう。 準備するもの パソコンまたはスマートフォン インターネット接続 メールアドレス（Gmail、Yahoo!メールなど） Step 1: AtCoderサイトにアクセス 【図2 6：AtCoderトップページへのアクセス】 {% capture access steps %} 1) ブラウザで を開く 2) トップ右上の「新規登録」または「ログイン」をクリック 3) 最新コンテスト情報や過去問にアクセス可能 {% endcapture %} {% include panel.html type=\"steps\" title=\"アクセス手順\" content=access steps %} Step 2 3: 新規登録とユーザー名設定 【図2 7：新規登録画面とユーザー名の考え方】 📝 新規登録フォーム {% include panel.html type=\"steps\" title=\"入力項目（例）\" content=\"ユーザー名／メールアドレス／パスワード／パスワード確認／利用規約への同意\" %} 💡 ユーザー名選択の重要ポイント {% capture good names %} 良いユーザー名の例 • programming taro（分かりやすい） • student2024（年度入り） • coder hanako（趣味が伝わる） • algorithm lover（興味の方向性） {% endcapture %} {% include panel.html type=\"steps\" title=\"✅ 良いユーザー名の例\" content=good names %} {% capture bad names %} 避けるべきユーザー名 • 本名フルネーム（プライバシー） • 学校名＋本名（個人特定リスク） • 生年月日を含む（セキュリティ） • 意味不明な文字列（覚えにくい） {% endcapture %} {% include panel.html type=\"warn\" title=\"❌ 避けるべきユーザー名\" content=bad names %} {% capture name tips %} ユーザー名選びのコツ • 将来の就活利用も想定 • 覚えやすくタイプしやすい • 興味が伝わる表現 • 5–15文字程度を目安 {% endcapture %} {% include panel.html type=\"info\" title=\"🎯 ユーザー名選択のコツ\" content=name tips %} Step 4 5: メールアドレスとパスワード設定 【図2 8：安全な設定のための注意点】 {% capture mail settings %} 推奨メールサービス • Gmail（@gmail.com） • Yahoo!メール（@yahoo.co.jp） • Outlook（@outlook.com） 注意点 • 長期間使うアドレスを選ぶ • 迷惑メール設定を確認 • パスワード再設定に必要 {% endcapture %} {% include panel.html type=\"info\" title=\"📧 メールアドレス設定\" content=mail settings %} {% capture pw good %} 良いパスワードの条件 • 8文字以上 • 大小文字・数字・記号を含む • 辞書にない単語の組合せ 例: MyAtCoder2024! {% endcapture %} {% include panel.html type=\"steps\" title=\"🔐 安全なパスワード作成\" content=pw good %} {% capture pw bad %} 危険なパスワード • 誕生日や電話番号 • 辞書にある単語のみ • 短すぎる（7文字以下） • 他サイトと共通 {% endcapture %} {% include panel.html type=\"warn\" title=\"❌ 避けるべきパスワード\" content=pw bad %} Step 6 7: 利用規約確認と登録完了 【図2 9：登録完了までの最終ステップ】 {% capture terms points %} 主な内容 • アカウントは1人1つまで • 不正行為の禁止 • 迷惑行為の禁止 • コンテスト中のルール遵守 中学生として特に注意 • 保護者の同意が前提 • 個人情報の取り扱いに注意 • 健全な利用を心がける {% endcapture %} {% include panel.html type=\"info\" title=\"📋 利用規約のポイント\" content=terms points %} 🎉 登録完了画面 {% include panel.html type=\"info\" title=\"登録完了\" content=\"認証メールを送信しました。メール内のリンクをクリックして認証を完了してください。\" %} トラブルシューティング {% capture t1 %} 原因: 他の人が同じユーザー名を使用済み 解決: 数字や記号を追加して変更 例: coder taro → coder taro2024 {% endcapture %} {% include panel.html type=\"warn\" title=\"❌ 問題1: 「このユーザー名は使用済みです」\" content=t1 %} {% capture t2 %} 確認事項 1. 迷惑メールフォルダをチェック 2. メールアドレスの入力ミス確認 3. 5–10分待ってから再確認 4. 再送信ボタンを押す {% endcapture %} {% include panel.html type=\"steps\" title=\"❌ 問題2: 認証メールが届かない\" content=t2 %} {% capture t3 %} チェック項目 • 8文字以上か • 大文字・小文字・数字を含むか • 確認用と一致しているか • 空白文字が入っていないか {% endcapture %} {% include panel.html type=\"steps\" title=\"❌ 問題3: パスワードが通らない\" content=t3 %} {% include panel.html type=\"steps\" title=\"パスワード確認チェック\" content=\"8文字以上／大小英字・数字（＋記号推奨）／確認入力と一致／空白なし\" %} 2.3 AtCoderの画面を探検しよう アカウントが作成できたら、AtCoderの画面を詳しく見てみよう。最初は情報が多くて戸惑うかもしれないが、慣れればとても使いやすいサイトなんだ。 【図2 11：AtCoderメイン画面の構成】 {% capture top blocks %} 上部バー: サイト名／検索／ユーザー名 メニュー: ホーム／コンテスト／問題／ランキング カード例: 今後のコンテスト／自分の成績／おすすめ問題 {% endcapture %} {% include panel.html type=\"info\" title=\"メイン画面の見どころ\" content=top blocks %} ナビゲーションメニューの使い方 【図2 12：各メニューの役割と使い方】 {% capture menu home %} 🏠 ホーム • 最新コンテスト／成績サマリー／おすすめ問題／お知らせ {% endcapture %} {% include panel.html type=\"steps\" title=\"ホーム\" content=menu home %} {% capture menu contest %} 🏆 コンテスト • 今後の予定／過去回／結果・順位／問題一覧 {% endcapture %} {% include panel.html type=\"steps\" title=\"コンテスト\" content=menu contest %} {% capture menu tasks %} 📚 問題 • 過去問検索／難易度別／分野別／提出状況 {% endcapture %} {% include panel.html type=\"steps\" title=\"問題\" content=menu tasks %} {% capture menu rank %} 👥 ランキング • 全体／国別／学校別／フレンド比較 {% endcapture %} {% include panel.html type=\"steps\" title=\"ランキング\" content=menu rank %} マイページの見方 【図2 13：マイページの重要な情報】 {% capture mypage %} プロフィール／レーティング／最高レート／参加回数／最高順位 レーティング推移グラフ／最近の提出 など {% endcapture %} {% include panel.html type=\"info\" title=\"マイページの構成\" content=mypage %} {% capture words %} AC: Accepted（正解） WA: Wrong Answer（不正解） TLE: Time Limit Exceeded（時間超過） {% endcapture %} {% include panel.html type=\"steps\" title=\"用語説明\" content=words %} 2.4 レーティングシステムを理解しよう AtCoderの大きな特徴の一つが「レーティングシステム」だ。これは君の実力を数値で表すシステムで、継続的な成長を実感できる仕組みになっている。 レーティングの変動の仕組み 【図2 15：レーティング変動のメカニズム】 📊 コンテスト参加前 {% include panel.html type=\"info\" title=\"レーティングの見方（例）\" content=\"現在: 420（茶）／期待順位: 800位（同レベルの想定順位）\" %} ↓ コンテスト参加 🏆 コンテスト結果による変動 ケース1: 期待より良い成績 {% include panel.html type=\"steps\" title="
  },
  {
    "url": "/competitive_programming_book/src/chapter-future-career/",
    "title": "第12章：未来への道筋を描こう",
    "content": "<! 本章は「中学生向け競技プログラミング入門書」の一部であり、 CC BY NC SA 4.0ライセンスの下で提供されます。 商用利用は事前許諾が必要です。 詳細：../../LICENSE.md 第12章：未来への道筋を描こう 12.1 高校・大学でのプログラミング学習 第11章で仲間と一緒に成長する方法を学んだ君は、もう一人前の競技プログラマーだ。でも、これはまだ始まりに過ぎない。高校、大学、そして社会人になっても、プログラミングの学習は続いていく。未来への道筋を一緒に描いてみよう。 【図12 1：中学→高校→大学での学習発展ロードマップ】 🏫 中学生段階（現在の君） {% include panel.html type=\"info\" title=\"達成したこと\" content=\"Python基本文法／AtCoder A・B攻略／基本アルゴリズム理解／エラー対応とデバッグ／コンテスト参加と継続習慣\" %} {% include panel.html type=\"info\" title=\"身につけた力\" content=\"論理的思考力／問題解決力／継続学習力／コミュニティ活用力／粘り強さ\" %} ➡ 成長・発展 🏫 高校段階（15–18歳）での発展 {% include panel.html type=\"info\" title=\"情報Ⅰでの優位性\" content=\"プログラミングで優位／アルゴリズム・データ構造の深い理解／問題解決の応用／入試の優位性／クラスメイト支援\" %} {% include panel.html type=\"info\" title=\"競プロの目標\" content=\"AtCoder 水色〜青／JOI本選・上位／IOI代表に挑戦／高度アルゴリズム習得／後輩指導\" %} {% include panel.html type=\"info\" title=\"他分野への応用\" content=\"数学（幾何/離散/統計）／物理（シミュ/数値）／化学（分子/反応）／生物（遺伝子/進化）／社会（データ分析/数理モデル）\" %} ➡ さらなる専門化 🎓 大学段階（18–22歳）での専門化 {% include panel.html type=\"info\" title=\"学部での学習\" content=\"CS基礎／ソフトウェア工学／AI/機械学習／DB/ネットワーク／組込み/IoT／セキュリティ/暗号\" %} {% include panel.html type=\"info\" title=\"研究活動へ参加\" content=\"アルゴリズム・計算理論／AI・ML最前線／HCI／社会課題×IT\" %} {% include panel.html type=\"info\" title=\"国際的な活動\" content=\"ICPC／海外研究室インターン／国際会議で発表／OSS貢献／海外大学院\" %} 高校での情報教育の変化 【図12 2：高校情報科目での君の優位性】 📚 「情報Ⅰ」（2022年度から必修） {% include panel.html type=\"info\" title=\"カリキュラム内容\" content=\"情報社会の問題解決／情報デザイン／コンピュータとプログラミング／ネットワークとデータ活用\" %} {% include panel.html type=\"info\" title=\"君の優位性\" content=\"プログラミングは復習→高度内容に挑戦／実践経験で応用問題を主導／実データ処理の経験で差が付く\" %} 🎓 大学入試での活用 {% include panel.html type=\"info\" title=\"共通テスト『情報』\" content=\"2025年度から追加予定／プログラミング・データ構造・アルゴリズム→得点源になりやすい\" %} {% include panel.html type=\"info\" title=\"推薦・AOでの強み\" content=\"AtCoderレート・順位／JOI・IOI成績／自作アプリ／コンテスト入賞／技術ブログ・発表\" %} {% include panel.html type=\"steps\" title=\"自己PRの書き方\" content=\"具体的な解決事例／成長プロセス／社会課題への技術的アプローチ／将来ビジョン／チーム経験\" %} {% include panel.html type=\"steps\" title=\"面接・プレゼン対策\" content=\"分かりやすい技術説明／デモ作品準備／論理的で簡潔な回答／情熱の表現／継続学習の意欲\" %} 学習の質的変化 【図12 3：学習段階による質的変化】 🎯 中学生期：基礎スキルの獲得 {% include panel.html type=\"info\" title=\"言語・文法\" content=\"Python基礎／変数・条件分岐・繰り返し／関数・リスト・辞書\" %} {% include panel.html type=\"info\" title=\"問題解決\" content=\"基本アルゴリズムの理解／パターン認識で解法適用／A・B問題を確実に解答\" %} {% include panel.html type=\"info\" title=\"思考\" content=\"手順的思考（段階的）／解説を読み模倣して理解／既知パターンへの当てはめ\" %} 🚀 高校生期：応用力の発展 {% include panel.html type=\"info\" title=\"技術\" content=\"複雑なデータ構造の活用／効率的アルゴリズム選択と実装／C・D問題へ挑戦\" %} {% include panel.html type=\"info\" title=\"思考\" content=\"抽象化・一般化／複数解法の比較検討／計算量と最適化の意識\" %} {% include panel.html type=\"info\" title=\"応用\" content=\"数学的厳密性の追求／理論と実践の接続／他分野（物理・生物等）への応用\" %} 🌟 大学生期：創造性・研究性の獲得 {% include panel.html type=\"info\" title=\"研究\" content=\"新手法・アルゴリズム開発／理論的証明と厳密性／未解決問題への挑戦\" %} {% include panel.html type=\"info\" title=\"社会応用\" content=\"実社会課題への適用／学際的研究への参加／社会的インパクトの創出\" %} {% include panel.html type=\"info\" title=\"指導\" content=\"後輩メンタリング／知識の体系化・教材化／コミュニティ貢献\" %} 12.2 プログラミング関連の進路選択 競技プログラミングで身につけた力は、将来の進路選択でも大きなアドバンテージになる。どんな道があるか、具体的な進路オプションを見てみよう。 【図12 4：プログラミングスキルを活かせる進路マップ】 🎓 大学・学部選択の戦略 {% include panel.html type=\"info\" title=\"情報系学部・学科\" content=\"情報工学／CS／情報システム／情報科学／知能情報／メディア情報／ソフトウェア工学／データサイエンス\" %} {% include panel.html type=\"info\" title=\"理系他分野での情報活用\" content=\"数学（暗号/計算/最適化）／物理（計算物理/シミュ）／生物（バイオ情報）／化学（計算化学/創薬）／工学（ロボティクス/制御）\" %} {% include panel.html type=\"info\" title=\"文理融合・応用分野\" content=\"経営情報（IT経営/データ分析）／デザイン（UI/UX）／教育（ICT/プログラミング教育）／心理（認知/ヒューマンファクタ）\" %} {% include panel.html type=\"steps\" title=\"選択の指針\" content=\"興味のある応用分野／研究環境の充実／就職実績と産学連携／国際性・海外交流／教授陣の研究実績\" %} 🏆 推薦入試・AO入試での戦略的活用 {% include panel.html type=\"info\" title=\"アピールできる実績\" content=\"AtCoderのレート/順位／JOI・IOI成績／自作アプリ／コンテスト入賞／技術ブログ・発表／OSS貢献\" %} {% include panel.html type=\"steps\" title=\"志望理由書の書き方\" content=\"具体的な解決事例／社会貢献の動機／学習計画と将来ビジョンの一貫性／成長ストーリー\" %} {% include panel.html type=\"steps\" title=\"面接での差別化\" content=\"非専門家にも伝わる説明／失敗からの学び／チーム/コミュニティ貢献／継続学習への情熱と計画\" %} {% include panel.html type=\"steps\" title=\"ポートフォリオのコツ\" content=\"GitHub公開／動画デモ／技術ブログ記録／コンテスト記録と推移\" %} 国際的な進路オプション 【図12 5：グローバルな学習・キャリア機会】 🌐 海外大学への進学 {% include panel.html type=\"info\" title=\"評価される大学\" content=\"MIT／Stanford／Carnegie Mellon／UC Berkeley／University of Waterloo など\" %} {% include panel.html type=\"info\" title=\"進学のメリット\" content=\"最高水準の研究環境／多様な文化との出会い／英語力と視野の拡大／国際ネットワーク構築／キャリア選択肢の拡大\" %} {% include panel.html type=\"info\" title=\"奨学金・支援\" content=\"競プロ実績による特別奨学金／JASSO／民間財団／大学独自制度\" %} {% include panel.html type=\"steps\" title=\"準備すべきこと\" content=\"英語（TOEFL/IELTS）／SAT/ACT対策／国際コンテスト実績／研究経験・社会貢献\" %} 💼 グローバル企業でのインターンシップ {% include panel.html type=\"info\" title=\"主要プログラム\" content=\"Google（GSoC/STEP）／Microsoft（Student Partner）／Meta（University Relations）／Apple（WWDC関連）／Amazon（Future Engineer）\" %} {% include panel.html type=\"info\" title=\"参加のメリット\" content=\"最新技術の体験／トップエンジニアと交流／実プロダクト開発／就職での優位／高報酬の機会\" %} {% include panel.html type=\"info\" title=\"評価ポイント\" content=\"競プロ実績／OSS貢献／創造的プロジェクト／問題解決力／コミュニケーションと英語力\" %} {% include panel.html type=\"steps\" title=\"応募準備\" content=\"GitHubで良質なコード公開／技術ブログ発信／ハッカソン・コンテスト実績／技術コミュニティ参加\" %} 🏆 国際競技での活躍 {% include panel.html type=\"info\" title=\"主要競技\" content=\"IOI／ICPC／Google Code Jam／Facebook Hacker Cup／TopCoder Open／Codeforces Global Round\" %} {% include panel.html type=\"info\" title=\"参加の価値\" content=\"世界レベルの証明／国際的ネットワーク／スカウト機会／生涯の友人関係／文化交流\" %} {% include panel.html type=\"steps\" title=\"挑戦プラン\" content=\"中学生：JOI予選→本選→春季合宿／高校生：IOI代表選考→IOI本大会／大学生：ICPC地区→世界大会／社会人：企業代表で参加\" %} {% include panel.html type=\"steps\" title=\"心構え\" content=\"結果より学び重視／文化の違いを楽しむ／語学力向上／国際的な友情を大切に\" %} 12.3 IT業界でのキャリアパス プログラミングスキルを活かした職業は、今後ますます需要が高まっていく。どんな仕事があり、どんなキャリアを歩めるのか、具体的に見てみよう。 【図12 6：IT業界キャリアマップ】 💻 ソフトウェアエンジニア（開発者） {% include panel.html type=\"info\" title=\"Webエンジニア\" content=\"フロント（React/Vue/Angular）／バックエンド（Django/Spring/Rails）／フルスタック／DevOps\" %} {% include panel.html type=\"info\" title=\"モバイルエンジニア\" content=\"iOS（Swift/SwiftUI）／Android（Kotlin/Java）／Flutter/React Native／ゲームアプリ\" %} {% include panel.html type=\"info\" title=\"ゲームエンジニア\" content=\"ゲームPG（Unity/Unreal）／グラフィックス／ネットワーク／AI・物理エンジン\" %} {% include panel.html type=\"info\" title=\"AIエンジニア\" content=\"機械学習モデル／データサイエンス／NLP・画像認識／MLOps"
  },
  {
    "url": "/competitive_programming_book/src/chapter-input-output/",
    "title": "第4章：入出力処理を完全マスター",
    "content": "<! 本章は「中学生向け競技プログラミング入門書」の一部であり、 CC BY NC SA 4.0ライセンスの下で提供されます。 商用利用は事前許諾が必要です。 詳細：../../LICENSE.md 第4章：入出力処理を完全マスター 章の学習目標 この章を読み終わることで、以下ができるようになります： 競技プログラミングでの入出力の特殊性を理解できる 様々な形式のデータを正確に読み込めるようになる 問題の要求に応じた適切な出力ができるようになる 入出力処理でよくあるエラーを回避できるようになる 競技プログラミングにおいて、入出力処理は最も基本的でありながら、最も重要な技術だ。どんなに素晴らしいアルゴリズムを思いついても、データを正しく読み込めなければ、正解にはたどり着けない。この章で、確実で効率的な入出力処理をマスターしよう。 4.1 入力って何？出力って何？ Scratchとの対比による理解 競技プログラミングでの入出力の特殊性 一般的なプログラムと競技プログラミングでは、入出力の方式が大きく異なる： 標準入力・標準出力の概念 AtCoderでは、この標準入力・標準出力を使って、自動的にプログラムをテストしている。君のプログラムに問題文の入力例を与えて、期待される出力例と一致するかをチェックしているんだ。 4.2 1つの数字を読み込もう 基本パターンの完全理解 最もシンプルな入力処理から始めよう。1つの整数を読み込む処理だ。 【図4 4：単一数値入力の内部処理フロー】 標準入力: \"42\\n\" ← \\nは改行文字（見えない） ↓ input()関数: \"42\" ← 文字列として取得（改行は除去） ↓ int()関数: 42 ← 整数として変換 ↓ 変数に格納: n = 42 コード例： <figure class=\"pseudocode\" <figcaption 整数入力と内部での変換</figcaption python n = int(input()) データ個数 numbers = [] 結果格納用 for in range(n): N回繰り返し x = int(input()) 1行ずつ読み込み numbers.append(x) この時点で numbers = [10, 25, 13] print(max(numbers)) 最大値: 25 print(sum(numbers)) 合計: 48 print(len(numbers)) 個数: 3 </figure リスト内包表記による効率化 Pythonには、より簡潔に書ける「リスト内包表記」という機能がある： 【図4 12：リスト内包表記の活用】 基本形 → 内包表記への変換 ❌ 冗長な書き方： <figure class=\"pseudocode\" <figcaption 基本形（冗長）</figcaption python n = int(input()) numbers = [int(input()) for in range(n)] </figure さらなる応用例： <figure class=\"pseudocode\" <figcaption 条件付きの読み込み</figcaption python n = int(input()) points = [list(map(int, input().split())) for in range(n)] 例: [[1, 2], [3, 4], [5, 6]] </figure 💡 \" \"（アンダースコア）の意味： • 変数名として\" \"を使うのは「値を使わない」という慣習 • range(n)のカウンタは必要だが、実際の値は使わない場合 • \"i\"でも動作するが、\" \"の方がPython的で推奨される 複数行・複数列データの処理 【図4 13：2次元データの読み込みパターン】 問題例：「N行M列の数値が与えられる」 入力例: 3 4 ← N=3行, M=4列 1 2 3 4 ← 1行目のデータ 5 6 7 8 ← 2行目のデータ 9 10 11 12 ← 3行目のデータ 処理コード： <figure class=\"pseudocode\" <figcaption N行M列の2次元読み込み</figcaption python n, m = map(int, input().split()) matrix = [list(map(int, input().split())) for in range(n)] </figure 実用例： <figure class=\"pseudocode\" <figcaption 集計パターン</figcaption int() n = int(input()) a, b = map(int, input().split()) numbers = [int(input()) for in range(n)] print( list)` リストの要素をスペース区切りで出力 次の章では、いよいよアルゴリズムの世界に足を踏み入れよう。問題を効率的に解くための「道具箱」を手に入れることで、君の競技プログラミングスキルは大きく飛躍するはずだ！"
  },
  {
    "url": "/competitive_programming_book/src/chapter-introduction/",
    "title": "第1章：競技プログラミングの世界を知ろう",
    "content": "<! 本章は「中学生向け競技プログラミング入門書」の一部であり、 CC BY NC SA 4.0ライセンスの下で提供されます。 商用利用は事前許諾が必要です。 詳細：../../LICENSE.md 第1章：競技プログラミングの世界を知ろう 1.1 競技プログラミングって何だろう？ 君がScratchでゲームを作ったり、キャラクターを動かしたりした経験を思い出してみよう。あのとき、頭の中で「キャラクターをどう動かそう？」「どんな条件でゴールにたどり着こう？」と考えながら、ブロックを組み合わせていたよね。 競技プログラミングは、まさにその考える楽しさを、より本格的な形で体験できる競技なんだ。 競技プログラミングの本質 競技プログラミングとは、制限時間内に出題される問題を、プログラムを書いて解く競技だ。パズルを解く楽しさと、プログラミングの技術が組み合わさった、まったく新しい体験ができる。 実際の問題解決プロセス パズルゲームとの共通点 世界中の仲間との繋がり 1.2 なぜ競技プログラミングをやるの？ 「なんで競技プログラミングなんてやる必要があるの？」と思うかもしれない。でも、競技プログラミングをやることで得られるものは、君の将来にとって本当に価値のあるものばかりなんだ。 論理的思考力の劇的な向上 問題解決能力の質的変化 創造性と表現力の開花 解法の多様性がもたらす創造性 複数のアプローチを知ることで、問題に対する視野が大きく広がります。同じ答えに辿り着く道は無限にあり、その中から最適な方法を選択する判断力こそが、真の問題解決能力なのです。 将来への具体的な投資効果 1.3 中学生の君にとってのメリット 中学生という年齢で競技プログラミングを始めることには、特別な意味がある。大学生や社会人になってから始めるのとは、全く違う価値があるんだ。 同世代との健全な競争環境 学習の好循環効果 将来選択肢の戦略的拡大 1.4 競技プログラミングの種類と特徴 競技プログラミングには様々な種類がある。それぞれに特徴があるので、自分に合ったものを選んで段階的にチャレンジしていこう。 AtCoder：日本最大級の学習に最適なサイト JOI：日本情報オリンピックへの挑戦 学習段階に応じたサイト選択戦略 詳細な学習タイムライン（要点） {% capture p1 %} 主な学習場所 : AtCoder 学習内容 : Python基本文法の完全習得 ABC A問題を安定して解答 基本アルゴリズムの理解／作法習得 成果指標 : レーティング 茶色(400+) A問題 正答率90%+ 月2回以上の参加 補助 : AOJ（基本問題）、paiza（基礎スキル） {% endcapture %} {% include panel.html type=\"plan\" title=\"🎯 Phase 1: 基礎固め (6ヶ月〜1年)\" content=p1 %} {% capture p2 %} 主な学習場所 : AtCoder 学習内容 : データ構造（リスト/辞書/集合）の活用 ABC B,C問題に挑戦 応用パターン／計算量を意識 成果指標 : レーティング 緑(800+) B正答率70%+ / C正答率30%+ 補助 : yukicoder（類題）, LeetCode（データ構造強化） {% endcapture %} {% include panel.html type=\"plan\" title=\"🎯 Phase 2: 応用力発展 (1年〜1年半)\" content=p2 %} {% capture p3 %} 主な学習場所 : AtCoder + JOI 学習内容 : 動的計画法など高度アルゴリズム ABC C,Dを安定 JOI過去問で実戦練習 成果指標 : レーティング 水色(1200+)挑戦 C正答率60%+ JOI予選通過レベル 補助 : Codeforces（比較）, AtCoder Problems（体系演習） {% endcapture %} {% include panel.html type=\"plan\" title=\"🎯 Phase 3: 高度挑戦 (1年半〜3年)\" content=p3 %} {% capture p4 %} 主な学習場所 : Codeforces + AtCoder 学習内容 : 世界レベル問題への挑戦 IOI過去問演習 英語問題文の読解 最新アルゴリズムの習得 成果指標 : レーティング 青(1600+) Codeforcesで安定 IOI代表候補レベル {% endcapture %} {% include panel.html type=\"plan\" title=\"🎯 Phase 4: 世界レベル挑戦 (高校以降)\" content=p4 %} 1.5 どこから始めるべきか 競技プログラミングの世界の全体像が見えてきたところで、具体的にどこから始めればいいのかを整理しよう。 【図1 20：中学生のための競技プログラミング開始戦略】 🎯 最初の1歩：AtCoderアカウント作成 {% capture now todo %} 1) AtCoder のアカウント作成 2) プロフィール設定 3) 画面構成の把握 4) 過去問を1–2問ざっと見る {% endcapture %} {% include panel.html type=\"steps\" title=\"今すぐやること\" content=now todo %} {% capture w1 goal %} • サイトの使い方に慣れる • A問題を1問解いてみる（解けなくてもOK） • コンテストスケジュールを確認 {% endcapture %} {% include panel.html type=\"info\" title=\"第1週の目標\" content=w1 goal %} 📚 学習環境の整備 (第2 3週) {% capture tech prep %} • Python 開発環境構築／エディタ設定／提出方法の練習 {% endcapture %} {% include panel.html type=\"steps\" title=\"技術的準備\" content=tech prep %} {% capture knowledge prep %} • Python 基本文法／入出力／基本アルゴリズムの概要把握 {% endcapture %} {% include panel.html type=\"info\" title=\"知識的準備\" content=knowledge prep %} {% capture w23 goal %} • 快適に書ける環境づくり • ABC A問題を2–3問 • 解けなくても焦らない {% endcapture %} {% include panel.html type=\"steps\" title=\"第2–3週の目標\" content=w23 goal %} 🏆 初回コンテスト参加 (第4週) {% capture pre contest %} • 開始30分前にPC前待機／水分補給・トイレ • 学習機会として楽しむ {% endcapture %} {% include panel.html type=\"steps\" title=\"初回参加の準備\" content=pre contest %} {% capture first goal %} • A問題に挑戦（解けなくてもOK） • 雰囲気を体験／時間内に1つ提出 {% endcapture %} {% include panel.html type=\"info\" title=\"初回参加の目標\" content=first goal %} {% capture post review %} • 分からなかった点の記録／次回の改善点整理 • 解説を読んで理解を深める {% endcapture %} {% include panel.html type=\"steps\" title=\"参加後の振り返り\" content=post review %} 成功のための心構えとマインドセット 【図1 21：競技プログラミングで成功するための心構え】 💭 健全なマインドセット {% capture good mind %} • 過去の自分と比較して成長に集中 • 失敗は学習の機会 • 継続を重視 • コミュニティで学ぶ • ゲーム感覚で楽しむ {% endcapture %} {% include panel.html type=\"info\" title=\"持つべき考え方\" content=good mind %} ❌ 避けるべき考え方 {% capture bad mind %} • 他人比較で自己否定／完璧主義／短期焦り • 何でも一人で抱え込む／レーティング至上主義 {% endcapture %} {% include panel.html type=\"warn\" title=\"避けるべき考え方\" content=bad mind %} 具体的な学習計画 【図1 22：最初の3ヶ月間の詳細学習計画】 📅 第1ヶ月：環境構築・基礎固め {% capture month1 %} 週1（1–2週）: アカウント/サイト理解・環境構築・入出力練習 週2（3–4週）: ABC A問題を毎日1問／解説で理解／初回コンテスト 目標: A問題5問以上／コンテスト1回／楽しさを実感 {% endcapture %} {% include panel.html type=\"steps\" title=\"第1ヶ月の計画\" content=month1 %} 📅 第2ヶ月：基本アルゴリズム習得 {% capture month2 %} 週1（5–6週）: 条件分岐・繰り返しを強化／A正答率80%／B挑戦開始 週2（7–8週）: リスト/文字列／辞書/集合の基礎／Bで部分点 目標: A安定正解／Bで部分点／レート200+ {% endcapture %} {% include panel.html type=\"steps\" title=\"第2ヶ月の計画\" content=month2 %} 📅 第3ヶ月：応用力強化・習慣定着 {% capture month3 %} 週1（9–10週）: 全探索（二重ループ）／Bの正答率向上／計算量理解 週2（11–12週）: C挑戦／時間配分練習／弱点発見と克服 目標: A/Bセットで解答／茶色(400+)／毎週参加を習慣化 {% endcapture %} {% include panel.html type=\"steps\" title=\"第3ヶ月の計画\" content=month3 %} まとめ：競技プログラミングの世界への招待 この章では、競技プログラミングとは何か、そしてなぜ中学生の君にとって価値があるのかを詳しく見てきた。 【図1 23：この章で発見した競技プログラミングの価値】 🎮 競技プログラミングの本質 {% include panel.html type=\"info\" title=\"価値の連鎖\" content=\"パズルの楽しさ×技術 → 思考力/解決力の向上 → 将来の価値へ\" %} 💡 中学生にとっての特別な価値 {% include panel.html type=\"info\" title=\"得られるもの\" content=\"健全な競争環境／学習の好循環／将来選択肢の拡大／早期開始の複利効果\" %} 🎯 具体的な学習戦略 {% include panel.html type=\"steps\" title=\"この章の到達点\" content=\"AtCoderから始める理由／段階的成長プロセス／現実的な目標設定／継続する心構え\" %} 君が今日学んだことの意味 今日、君は単に「競技プログラミング」という言葉を知っただけではない。自分の将来を大きく変える可能性のある新しい世界の扉を発見したんだ。 Scratchでの経験が活かされる 君がScratchで培った「問題を分解して考える力」「試行錯誤を楽しむ心」「創作する喜び」は、競技プログラミングで大いに活かされる。そして、それが更に洗練され、将来の君を強力にサポートしてくれる。 次のステップへの招待 【図1 24：君の競技プログラミングジャーニーの始まり】 最後のメッセージ 競技プログラミングの世界は、年齢や経験に関係なく、 努力と継続によって必ず成長できる 公平な世界だ。今日できなかったことが、明日にはできるようになる。そして、君が成長した分だけ、世界をより良くする力も大きくなる。 君の新しい冒険を、競技プログラミングコミュニティ全体が応援している。そして、いつか君も、この文章を読む次の世代の中学生たちの良きメンターになってくれることを願っている。 【図1 25：次章への架け橋】 🎮 理論から実践へ！ いよいよAtCoderの世界に足を踏み入れよう！ 次の章では、実際にAtCoderのサイトにアクセスして、アカウントを作る方法から詳しく学んでいこう。君の競技プログラミングライフが、いよいよ本格的に始まる！"
  },
  {
    "url": "/competitive_programming_book/src/chapter-problem-solving/",
    "title": "第8章：問題解決プロセスを身につけよう",
    "content": "<! 本章は「中学生向け競技プログラミング入門書」の一部であり、 CC BY NC SA 4.0ライセンスの下で提供されます。 商用利用は事前許諾が必要です。 詳細：../../LICENSE.md 第8章：問題解決プロセスを身につけよう 8.1 問題文を正確に読む技術 第7章では具体的な問題の解き方を学んだが、この章では「どんな問題でも体系的に解けるプロセス」を身につけよう。まずは、すべての出発点となる「問題文の正確な読解」から始める。 問題文の読み方次第で、その後のすべてが決まる。ここで差がつくんだ。 【図8 1：問題文読解の3段階プロセス】 <figure <img src=\"{{ '/assets/diagrams/generated/ch8 3stage.svg' | relative url }}\" alt=\"図8 1：問題文読解の3段階プロセス\" <figcaption 図8 1：問題文読解の3段階プロセス</figcaption </figure {% capture s1a %} 目的 : 問題の全体像を掴む 時間 : 1–2分 {% endcapture %} {% include panel.html type=\"plan\" title=\"🔍 第1段階：全体把握（流し読み）\" content=s1a %} {% capture s1b %} • 何を求める問題か（最大値？個数？判定？） • 入力の種類（数値？文字列？配列？） • 制約の規模感（N≤100？N≤10^6？） • 問題の分野（数学？文字列？グラフ？） {% endcapture %} {% include panel.html type=\"info\" title=\"✅ 注目ポイント\" content=s1b %} {% capture s1c %} • 詳細な制約の確認 • サンプルの詳しい分析 • 解法の検討 {% endcapture %} {% include panel.html type=\"warn\" title=\"🚫 この段階でやらないこと\" content=s1c %} {% capture s1d %} 「この問題は○○系の問題で、○○を求める」 と一言で説明できればOK {% endcapture %} {% include panel.html type=\"steps\" title=\"💡 判断基準\" content=s1d %} {% capture s2a %} 目的 : 実装に必要な詳細の正確な把握 時間 : 2–4分 {% endcapture %} {% include panel.html type=\"plan\" title=\"🔍 第2段階：詳細理解（精読）\" content=s2a %} {% capture s2b %} • 入力形式（行数/順序/区切り） • 出力形式（改行/スペース/有効桁） • 制約条件（値の範囲/上限） • 特殊ケース（0個/重複/負数） • 用語の定義（問題固有の意味） {% endcapture %} {% include panel.html type=\"steps\" title=\"✅ チェック項目\" content=s2b %} {% capture s2c %} • 制約をメモに書き出す • 不明用語は問題文内で再確認 • 「もし〜なら？」の枝分かれ {% endcapture %} {% include panel.html type=\"info\" title=\"📝 実践チェック\" content=s2c %} {% capture s2d %} 問題文を見ずに、入力/出力/制約を他人に説明できる {% endcapture %} {% include panel.html type=\"warn\" title=\"💡 理解度チェック\" content=s2d %} 🔍 第3段階：実装準備（サンプル分析） {% capture s3a %} 目的 : 実装方針を確定 時間 : 2–3分 {% endcapture %} {% include panel.html type=\"plan\" title=\"🧪 サンプル分析\" content=s3a %} {% capture sample points %} • 入力→出力の変換過程を手で追う • なぜその出力になるかを説明できる • 他ケースでも成り立つか検証 • エッジケースを推測 {% endcapture %} {% include panel.html type=\"steps\" title=\"サンプル分析のポイント\" content=sample points %} {% capture sample think %} 1) サンプル入力を実際に処理 2) 中間値を確認 3) 出力に至る論理を把握 4) 一般化できるアルゴリズムを導出 {% endcapture %} {% include panel.html type=\"info\" title=\"思考プロセス\" content=sample think %} {% include panel.html type=\"info\" title=\"完了の目安\" content=\"このアルゴリズムで間違いなく解ける、と確信できたら第3段階完了\" %} 問題文読解の実践テクニック 【図8 2：効果的な問題文読解テクニック】 {% capture rd keywords %} 🔍 キーワード識別法 • 動詞: 求める/判定/出力 • 数量詞: 最大/最小/個数/総和 • 条件: 以上/以下/ちょうど • 制約: N≤/時間/メモリ {% endcapture %} {% include panel.html type=\"steps\" title=\"読解の視点（キーワード）\" content=rd keywords %} {% capture rd notes %} 📝 メモ取り戦略 • 制約は必ず書き出す • 入出力形式を整理 • 不明点に「？」 • 重要は下線/強調 {% endcapture %} {% include panel.html type=\"info\" title=\"メモ取りのコツ\" content=rd notes %} {% capture rd repeat %} 🔄 反復読解法 1) 全体像 2) 詳細と制約 3) サンプル整合性 {% endcapture %} {% include panel.html type=\"steps\" title=\"反復読解の流れ\" content=rd repeat %} {% capture rd selfcheck %} 💡 自問自答 • 何を求める？ • 入力の個数/形式？ • 出力の形式？ • 最重要な制約は？ {% endcapture %} {% include panel.html type=\"steps\" title=\"理解確認（チェック）\" content=rd selfcheck %} {% capture rd mistakes %} ❌ ミス1: 「以上」と「より大きい」の混同 → ≥ と を区別 ❌ ミス2: 出力形式の見落とし → 文字単位で確認 ❌ ミス3: 制約見落とし → 別紙にメモして実装前再確認 ❌ ミス4: 特殊ケース無視 → 「0だったら？」を常に検討 ❌ ミス5: 用語誤解 → 定義を再読 ✅ ルール • 推測で進まない • サンプルで動作確認 • 実装後に制約を再チェック {% endcapture %} {% include panel.html type=\"warn\" title=\"よくあるミスと対策\" content=rd mistakes %} 実際の問題での読解実演 【図8 3：ABC問題での読解プロセス実演】 {% capture ex three dice %} 例題（架空）: 3つのサイコロの目 a,b,c に対し、合計≥10 かつ 少なくとも1つが6 なら \"Lucky\"、それ以外は \"Unlucky\"。 入力: a b c（各1〜6）／出力: Lucky or Unlucky {% endcapture %} {% include panel.html type=\"info\" title=\"📋 例題：Three Dice\" content=ex three dice %} {% capture stage1 %} 読み取れること • 判定問題（if文）／入力3整数 • 条件は「合計」と「最大値」のAND • 難易度: A問題レベル {% endcapture %} {% include panel.html type=\"steps\" title=\"第1段階：全体把握\" content=stage1 %} {% capture stage2 %} 制約/条件/エッジ • 条件1: a+b+c ≥ 10 • 条件2: max(a,b,c) = 6 • 例: 6,1,1 → 合計不足／5,5,1 → 6が無い {% endcapture %} {% include panel.html type=\"steps\" title=\"第2段階：詳細理解\" content=stage2 %} {% capture stage3 %} サンプル検証 • 6 2 3 → 合計11≥10 かつ max=6 → Lucky • 1 2 3 → 合計6<10 かつ max≠6 → Unlucky {% endcapture %} {% include panel.html type=\"steps\" title=\"第3段階：サンプル分析\" content=stage3 %} <figure class=\"pseudocode\" <figcaption 最終アルゴリズム</figcaption <pre <code class=\"language python\" a, b, c = map(int, input().split()) if (a + b + c) = 10 and max(a, b, c) == 6: print('Lucky') else: print('Unlucky')</code </pre </figure 8.2 サンプル入出力を活用しよう 問題文を正確に理解したら、次はサンプル入出力を徹底活用しよう。サンプルは単なる「例」ではない。解法発見の重要な手がかりなんだ。 【図8 4：サンプル活用の4段階戦略】 🔍 段階1：動作確認（基本） {% capture g1 %} 目的 : 問題の動作を正確に理解 やること : • サンプル入力を手で処理 • 中間結果を計算 • 最終出力までの過程を確認 具体例 : 入力[3,1,4,1,5] → 最大値 5 （3→4→4→5 と比較） 確認 : • 各ステップが要求通りか • 計算過程に矛盾がないか • 出力形式が正確か {% endcapture %} {% include panel.html type=\"steps\" title=\"段階1：動作確認\" content=g1 %} 💡 段階2：パターン発見（応用） {% capture g2 %} 目的 : サンプルから規則性を発見 技法 : • 入力→出力への影響分析 • 数値関係（比例/逆比例/指数） • 文字列の規則（置換/挿入/削除） • 配列操作（ソート/フィルタ） 例 : [2,3]→6 / [4,5]→20 → 出力=入力1×入力2？ 検証: 2×3=6, 4×5=20 注意 : サンプルだけで決めつけない／複数仮説／問題文と整合 {% endcapture %} {% include panel.html type=\"info\" title=\"段階2：パターン発見\" content=g2 %} 🧪 段階3：仮説検証（発展） {% capture g3 %} 目的 : 発見したパターンの正しさを検証 方法 : • 追加のテストケースを作成 • 境界値（エッジケース）を確認 • 逆算チェック（出力→入力） • 数学的証明または論理的説明 例 : 仮説「合計/2 が出力」→ [10,20] なら 30/2=15 境界: [1] → 1/2=0.5? → 整数/実数を要確認 注意 : 特定ケースのみ成立／詳細未定義／特殊処理未定義 → 問題文再読 {% endcapture %} {% include panel.html type=\"info\" title=\"段階3：仮説検証\" content=g3 %} 🎯 段階4：実装準備（完成） {% capture g4 %} 目的 : 確信を持って実装へ移行 完了条件 : • アルゴリズムが明確 • すべてのサンプルで正しい • エッジケースの処理方針が確定 • 使用するデータ構造・関数が決定 最終チェックリスト : ✅ 入力の読み取り方法は決まったか？ ✅ メインロジックは決まったか？ ✅ 出力形式は正確か？ ✅ 計算量は制約に十分か？ ✅ 特殊ケースを考慮したか？ 実装開始の判断基準 : 上記すべてに「Yes」→ 実装開始。1つでも不明点があれば問題文を再確認。 {% endcapture %} {% include panel.html type=\"plan\" title=\"段階4：実装準備\" content=g4 %} サンプル分析の実践例 【図8 5：実際の問題でのサンプル分析実演】 📋 問題例：「配列の変換」 {% capture ex %} 課題 : N個の整数からなる配列Aを、特定のルールで変換して出力する サンプル1 入力: 3 / 2 4 6 → 出力: 1 2 3 サンプル2 入力: 4 / 10 5 15 20 → 出力: 2 1 3 4 ヒント: まずは入出力の対応から規則性を探す {% endcapture %} {% include panel.html type=\"info\" title=\"問題例：配列の変換\" content=ex %} 🔍 段階1：動作確認 {% capture a1 %} サンプル1: 入力[2,4,6] → 出力[1,2,3] 要素対応: 2→1, 4→2, 6→3 数"
  },
  {
    "url": "/competitive_programming_book/src/chapter-programming-environment/",
    "title": "第3章：プログラミング環境を整えよう",
    "content": "<! 本章は「中学生向け競技プログラミング入門書」の一部であり、 CC BY NC SA 4.0ライセンスの下で提供されます。 商用利用は事前許諾が必要です。 詳細：/LICENSE.md <! ※ 上記のリンクはプロジェクトルートからの絶対パスを想定しています。ディレクトリ構成を変更する場合はご注意ください。 第3章：プログラミング環境を整えよう 章の学習目標 この章を読み終わることで、以下ができるようになります： Pythonを選ぶ理由を理解し、適切にインストールできる 競技プログラミングに適したエディタを設定できる AtCoderで実際にコードを提出できる 基本的なデバッグ技術を使って問題を解決できる 第2章でAtCoderの世界を理解したね。今度は実際に競技プログラミングを始めるための「道具」を準備しよう。料理人にとっての包丁や、画家にとっての筆のように、プログラマーにとって開発環境は成果を大きく左右する重要な要素なんだ。 3.1 なぜPythonを選ぶの？ Scratchからの自然なステップアップ [図3 1：ScratchからPythonへの自然な進化] 君がScratchを使っていた時を思い出してみよう。「もし〜なら」のブロックを使って条件分岐を作ったり、「〜回繰り返す」のブロックでループを作ったりしていたよね。Pythonは、そのScratchの考え方をそのまま文字で表現できる言語なんだ。 競技プログラミングでのPythonの優位性 なぜPythonが初心者に最適なのか 1. 読みやすさ第一の設計 コードが英語の文章のように読める インデント（字下げ）で構造が一目で分かる 余計な記号が少なく、本質に集中できる 2. 豊富な標準ライブラリ 数学計算、文字列処理、データ構造など基本的な機能が充実 車輪の再発明をする必要がない より高レベルな問題解決に集中できる 3. エラーメッセージの親切さ 何が間違っているか具体的に教えてくれる 初心者がつまづきやすいポイントを明確に指摘 デバッグが他の言語より格段に楽 4. AtCoderでの実績 多くの日本人競技プログラマーが使用 実行時間制限も十分（ほとんどの問題で間に合う） 豊富な解説記事とサンプルコード 将来性も考慮した言語選択 Pythonを学ぶことは、単に競技プログラミングのためだけではない。将来、どの技術分野に進んでも活用できる、投資価値の高いスキルなんだ。 3.2 Pythonをインストールしよう インストール前の準備確認 まず、君のパソコンの状況を確認しよう： 【図3 4：事前確認チェックリスト】 {% capture precheck hw %} ✅ ハードウェア要件 • Windows 10/11、macOS 10.9以降、または Linux • 空き容量: 最低100MB（推奨1GB以上） • メモリ: 最低512MB（推奨2GB以上） {% endcapture %} {% include panel.html type=\"steps\" title=\"ハードウェア\" content=precheck hw %} {% capture precheck perm %} ✅ 権限の確認 • 管理者権限（または保護者の許可） • インターネット接続 • セキュリティソフト設定の確認 {% endcapture %} {% include panel.html type=\"info\" title=\"権限/ネットワーク\" content=precheck perm %} {% capture precheck env %} ✅ 学習環境 • 集中できる時間（30分〜1時間） • メモの準備（紙/デジタル） {% endcapture %} {% include panel.html type=\"steps\" title=\"学習環境\" content=precheck env %} Windows版インストール手順（詳細版） Windowsユーザーが最も多いため、詳しく説明するね。 macOS版インストール手順 【図3 6：macOS Python インストールガイド】 {% capture macos installer %} 方法1（推奨）: 公式インストーラー 1) https://python.org から macOS 版をダウンロード 2) .pkg を実行 3) 管理者パスワード入力→インストール 4) で確認 {% endcapture %} {% include panel.html type=\"steps\" title=\"公式インストーラー\" content=macos installer %} {% capture macos brew %} 方法2（上級者）: Homebrew • で最新版を管理 {% endcapture %} {% include panel.html type=\"info\" title=\"Homebrew\" content=macos brew %} {% capture macos check %} 確認 • ターミナルを開く • を実行 • {% endcapture %} {% include panel.html type=\"steps\" title=\"動作確認\" content=macos check %} トラブルシューティング インストールでよくあるトラブルと解決方法： 【図3 7：よくあるトラブルと解決方法】 {% capture tr path %} ❌ 問題: \"python が認識されません\" 原因: PATH 設定漏れ 対処: 1) 再インストール 2) 「Add Python to PATH」にチェック 3) 端末を再起動 {% endcapture %} {% include panel.html type=\"warn\" title=\"PATHエラー\" content=tr path %} {% capture tr admin %} ❌ 問題: 管理者権限がない 対処: 1) 保護者に依頼 2) 学校PCは先生に相談 3) ポータブル版Pythonを検討 {% endcapture %} {% include panel.html type=\"warn\" title=\"権限エラー\" content=tr admin %} {% capture tr versions %} ❌ 問題: 古いバージョンが起動する 原因: 複数Pythonの混在 対処: 1) macOS/Linux: を使用 2) Windows: を使用 3) フルパス指定 {% endcapture %} {% include panel.html type=\"warn\" title=\"複数バージョン衝突\" content=tr versions %} {% capture tr flow %} 🔧 総合手順 1) 管理者権限で再実行 2) セキュリティソフト一時無効 3) 公式ドキュメント確認 4) コミュニティで質問 {% endcapture %} {% include panel.html type=\"steps\" title=\"困ったときの流れ\" content=tr flow %} 3.3 エディタを選んで設定しよう エディタ選択の重要性 プログラミングエディタは、君がこれから長時間向き合うことになる重要なパートナーだ。良いエディタを選ぶことで、学習効率が大幅に向上する。 【図3 8：初心者向けエディタ選択マトリックス】 使いやすさ 高機能 軽量性 学習コスト 総合評価 Thonny ★★★★★ ★★☆ ★★★ ★★★★★ ★★★★★ VSCode ★★★★☆ ★★★★★ ★★☆ ★★★☆☆ ★★★★☆ IDLE ★★★☆☆ ★★☆ ★★★★☆ ★★★★★ ★★★☆☆ PyCharm ★★☆☆☆ ★★★★★ ★☆☆ ★★☆☆☆ ★★★☆☆ Sublime ★★★☆☆ ★★★☆☆ ★★★★☆ ★★★☆☆ ★★★☆☆ 🎯 初心者には Thonny を最推奨 🎯 少し慣れたら VSCode への移行を検討 Thonny：完璧な初心者向けエディタ Thonnyは、プログラミング教育のために特別に設計されたエディタだ。 VSCode：成長とともに使える高機能エディタ Thonnyに慣れてきたら、VSCodeへの移行を検討しよう。世界中のプロのプログラマーが使っている本格的なエディタだ。 【図3 10：VSCode セットアップ完全ガイド】 {% capture vs install %} 📥 基本インストール 1) https://code.visualstudio.com にアクセス 2) Download をクリック 3) インストーラーを実行 4) 初回起動時に日本語化 {% endcapture %} {% include panel.html type=\"steps\" title=\"インストール\" content=vs install %} {% capture vs ext %} 🔌 必須拡張機能 • Python Extension Pack（言語/補完/Lint/デバッグ） • 便利: Bracket Pair Colorizer, indent rainbow, Code Runner {% endcapture %} {% include panel.html type=\"info\" title=\"拡張機能\" content=vs ext %} {% capture vs settings %} ⚙️ 推奨設定 • 自動保存: 有効 • フォント: 14px • テーマ: Dark+ • 行番号: 有効／ミニマップ: 無効 • ショートカット: F5 実行, Ctrl+S 保存, Ctrl+/ コメント {% endcapture %} {% include panel.html type=\"steps\" title=\"競プロ向け設定\" content=vs settings %} 開発環境の基本操作 どのエディタを選んでも、基本的な操作は共通している： 【図3 11：プログラミングエディタ基本操作】 {% capture edit files %} 📂 ファイル操作 • 新規: Ctrl+N • 保存: Ctrl+S • 拡張子: .py（例: abc001 a.py, practice.py） {% endcapture %} {% include panel.html type=\"steps\" title=\"ファイル操作\" content=edit files %} {% capture edit code %} ⌨️ コード編集 • コピー/切り取り: Ctrl+C/Ctrl+X • 貼り付け/元に戻す: Ctrl+V/Ctrl+Z • 行選択: 行番号クリック • 検索/置換: Ctrl+F / Ctrl+H • 複数行コメント: Ctrl+/ {% endcapture %} {% include panel.html type=\"steps\" title=\"コード編集\" content=edit code %} {% capture run debug %} 🚀 実行/デバッグ • 実行: F5 または実行ボタン • 停止: Ctrl+C • ターミナル: Ctrl+ print`文を使って変数の値を確認することだ。 【図3 17：print文デバッグの実践例】 問題のあるコード例： デバッグ版（print文追加）： デバッグ実行例： 🔍 n = 3 🔍 i=0, x=10 🔍 total=10 🔍 i=1, x=20 🔍 total=30 🔍 i=2, x=30 🔍 total=60 🔍 最終total = 60 30 💡 分析結果： totalの計算は正しい。問題は「total // 2」の部分。 問題文を再確認すると、平均値ではなく合計値を求める問題だった！ エラーメッセージの読み方 Pythonのエラーメッセージは実は非常に親切だ。正しく読み方を覚えれば、問題の場所がすぐに分かる。 【図3 18：エラーメッセージ解読ガイド】 典型的なエラーメッセージ： 📖 読み方： {% capture tb howto %} 1) エラー種別: ZeroDivisionError → 0 で割った 2) 場所: abc001 a.py の 4 行目 3) 該当コード: result = x / y 4) 具体的原因: division by zero（ゼロによる除算） {% endcapture %} {% include panel.html type=\"steps\" title=\"エラーメッセージの読み方\" content=tb howto %} 🔧 解決方法： 頻出エラーと解決法 【図3 19：Python初心者の頻出エラー辞典】 {% include panel.html type=\"info\" title=\"SyntaxError（文法エラー）\" content=\": の付け忘れ／括弧の対応ミス／インデント幅不統一／全角混入。エディタの文法チェック活用\" %} {% include panel.html type=\"info\" title=\"NameError（未定義名）\" content=\"タイプミス／定義前参照／大文字小文字。短く分かりやすい命名で統一\" %} {% include panel.html type=\"warn\" title=\"IndexError（範囲外）\" content=\"arr[5] だが 0..3 まで／空リスト。len()で境界確認を習慣化\" %} ステップ実行によるデバッグ より高度なデバッグ技法として、ステップ実行がある。ThonnyとVSCodeの両方で使える。 【図3 20：ステップ実行デバッグ手順】 🔍 Thonnyでのステップ実行 {% capture thonny steps %} 1) Debug メニュー → Step by step 2) Step into で1行ずつ実行 3) Variables で値を確認 4) 問題箇所で何が起きてい"
  }
]