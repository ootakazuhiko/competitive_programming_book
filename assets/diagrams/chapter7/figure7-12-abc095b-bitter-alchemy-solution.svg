<svg viewBox="0 0 900 1100" xmlns="http://www.w3.org/2000/svg" style="font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;">
  <defs>
    <style>
      .header { font-size: 16px; font-weight: 600; fill: var(--text-primary, #1a1a1a); }
      .category-title { font-size: 14px; font-weight: 600; fill: var(--text-primary, #1a1a1a); }
      .item-text { font-size: 12px; fill: var(--text-secondary, #4a4a4a); }
      .code-text { font-size: 11px; fill: var(--text-tertiary, #666666); font-family: 'Monaco', 'Consolas', monospace; }
      .highlight-text { font-size: 11px; fill: var(--success-text, #059669); font-weight: 500; }
      .step-text { font-size: 10px; fill: var(--text-tertiary, #666666); }
      .error-text { font-size: 11px; fill: var(--error-text, #dc2626); }
      .box { fill: var(--bg-primary, #ffffff); stroke: var(--border-primary, #d1d5db); stroke-width: 1.5; }
      .header-box { fill: var(--bg-accent, #f3f4f6); stroke: var(--border-primary, #d1d5db); stroke-width: 1.5; }
      .problem-box { fill: var(--bg-info, #e8f5ff); stroke: var(--border-info, #3b82f6); stroke-width: 1.5; }
      .analysis-box { fill: var(--bg-warning, #fffaf0); stroke: var(--border-warning, #f59e0b); stroke-width: 1.5; }
      .solution-box { fill: var(--bg-success, #f0f9f5); stroke: var(--border-success, #10b981); stroke-width: 1.5; }
      .strategy-box { fill: var(--bg-purple, #f3e8ff); stroke: var(--border-purple, #8b5cf6); stroke-width: 1.5; }
      .verification-box { fill: var(--bg-secondary, #f8fafc); stroke: var(--border-secondary, #94a3b8); stroke-width: 1.5; }
    </style>
  </defs>

  <!-- Title -->
  <rect x="20" y="20" width="860" height="40" class="header-box" rx="8"/>
  <text x="450" y="44" text-anchor="middle" class="header">🍩 ABC095 B問題「Bitter Alchemy」完全解法</text>

  <!-- Problem Statement -->
  <rect x="40" y="80" width="820" height="160" class="problem-box" rx="8"/>
  <text x="60" y="104" class="category-title">📋 問題文</text>
  
  <text x="80" y="128" class="item-text">高橋君はドーナツを作ります。N種類のドーナツを1個ずつ作るのに</text>
  <text x="80" y="148" class="item-text">必要な小麦粉の量は m1, m2, ..., mN グラムです。</text>
  <text x="80" y="168" class="item-text">手元にX グラムの小麦粉があります。</text>
  <text x="80" y="188" class="item-text">各種類のドーナツを少なくとも1個は作った後、</text>
  <text x="80" y="208" class="item-text">余った小麦粉で追加のドーナツを何個作れるでしょうか？</text>
  
  <text x="600" y="128" class="item-text">入力例:</text>
  <text x="600" y="148" class="step-text">3 1000</text>
  <text x="600" y="168" class="step-text">120 100 140</text>
  <text x="600" y="188" class="item-text">出力例:</text>
  <text x="600" y="208" class="step-text">7</text>

  <!-- Problem Analysis -->
  <rect x="40" y="260" width="820" height="180" class="analysis-box" rx="8"/>
  <text x="60" y="284" class="category-title">🔍 問題分析</text>
  
  <text x="80" y="308" class="item-text">理解したこと：</text>
  <text x="100" y="328" class="item-text">• N種類のドーナツを1個ずつ必ず作る</text>
  <text x="100" y="348" class="item-text">• 残った小麦粉で追加のドーナツを作る</text>
  <text x="100" y="368" class="item-text">• 追加分は最も効率的なものを作り続ける</text>
  
  <text x="480" y="308" class="item-text">戦略：</text>
  <text x="500" y="328" class="step-text">1. 各種類1個ずつ作るのに必要な小麦粉を計算</text>
  <text x="500" y="348" class="step-text">2. 残りの小麦粉を計算</text>
  <text x="500" y="368" class="step-text">3. 最も少ない小麦粉で作れるものを特定</text>
  <text x="500" y="388" class="step-text">4. 残り小麦粉で何個作れるかを計算</text>
  
  <text x="80" y="408" class="highlight-text">🎯 貪欲法：余った分で最小コストのものを作り続ける</text>

  <!-- Solution Strategy -->
  <rect x="40" y="460" width="820" height="200" class="strategy-box" rx="8"/>
  <text x="60" y="484" class="category-title">💡 解法戦略（貪欲アルゴリズム）</text>
  
  <text x="80" y="508" class="item-text">サンプルで考える：</text>
  <text x="100" y="528" class="step-text">• ドーナツの種類: 3種類</text>
  <text x="100" y="548" class="step-text">• 必要な小麦粉: [120, 100, 140] グラム</text>
  <text x="100" y="568" class="step-text">• 持っている小麦粉: 1000 グラム</text>
  
  <text x="480" y="508" class="item-text">計算手順：</text>
  <text x="500" y="528" class="step-text">1. 必須分: 120 + 100 + 140 = 360グラム</text>
  <text x="500" y="548" class="step-text">2. 残り: 1000 - 360 = 640グラム</text>
  <text x="500" y="568" class="step-text">3. 最小コスト: min(120, 100, 140) = 100グラム</text>
  <text x="500" y="588" class="step-text">4. 追加個数: 640 ÷ 100 = 6個</text>
  <text x="500" y="608" class="step-text">5. 総個数: 3 + 6 = 9個</text>
  
  <text x="80" y="628" class="error-text">❌ あれ？サンプル出力は7...計算見直し必要</text>

  <!-- Correct Solution -->
  <rect x="40" y="680" width="820" height="260" class="solution-box" rx="8"/>
  <text x="60" y="704" class="category-title">✅ 正しい実装</text>
  
  <rect x="60" y="720" width="400" height="200" class="box" rx="4"/>
  <text x="80" y="740" class="code-text">n, x = map(int, input().split())</text>
  <text x="80" y="760" class="code-text">costs = list(map(int, input().split()))</text>
  <text x="80" y="780" class="code-text"></text>
  <text x="80" y="800" class="code-text"># 各種類1個ずつ作る</text>
  <text x="80" y="820" class="code-text">required = sum(costs)</text>
  <text x="80" y="840" class="code-text">remaining = x - required</text>
  <text x="80" y="860" class="code-text"></text>
  <text x="80" y="880" class="code-text"># 最小コストで追加分を計算</text>
  <text x="80" y="900" class="code-text">min_cost = min(costs)</text>

  <text x="480" y="740" class="item-text">🔍 問題文の解釈：</text>
  <text x="500" y="760" class="item-text">「追加のドーナツを何個」</text>
  <text x="500" y="780" class="item-text">→ 必須分(N個)を除いた追加分のみ</text>
  <text x="500" y="820" class="item-text">🧮 計算：</text>
  <text x="500" y="840" class="step-text">• 必須: 360グラム</text>
  <text x="500" y="860" class="step-text">• 残り: 640グラム</text>
  <text x="500" y="880" class="step-text">• 追加: 640÷100 = 6個</text>
  <text x="500" y="900" class="highlight-text">• 答え: 6個 + 1個 = 7個</text>

  <!-- Final Code -->
  <rect x="60" y="960" width="400" height="40" class="box" rx="4"/>
  <text x="80" y="980" class="code-text">additional = remaining // min_cost</text>
  <text x="80" y="1000" class="code-text">print(n + additional)  # 必須分+追加分</text>

  <!-- Verification -->
  <rect x="480" y="960" width="360" height="80" class="verification-box" rx="4"/>
  <text x="500" y="980" class="item-text">💡 重要なポイント：</text>
  <text x="520" y="1000" class="item-text">• 各種類1個ずつは必須</text>
  <text x="520" y="1020" class="item-text">• 余った分で効率的に追加作成</text>

  <!-- Key Learning -->
  <rect x="40" y="1060" width="820" height="40" class="verification-box" rx="8"/>
  <text x="60" y="1084" class="category-title">🎯 学習ポイント：貪欲法の典型例 - 余った資源で最も効率的な選択を繰り返す</text>
</svg>