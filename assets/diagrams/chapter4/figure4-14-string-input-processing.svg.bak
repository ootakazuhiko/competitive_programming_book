<svg viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      :root {
        --primary-color: #2c3e50;
        --secondary-color: #3498db;
        --accent-color: #e74c3c;
        --success-color: #27ae60;
        --info-color: #17a2b8;
        --background-light: #ecf0f1;
        --text-dark: #2c3e50;
        --border-color: #bdc3c7;
      }
      
      .container { font-family: 'Inter', sans-serif; }
      .title { font-size: 18px; font-weight: 600; fill: var(--primary-color); }
      .subtitle { font-size: 14px; font-weight: 500; fill: var(--text-dark); }
      .text { font-size: 12px; fill: var(--text-dark); }
      .code { font-family: 'Consolas', 'Monaco', monospace; font-size: 11px; fill: var(--text-dark); }
      .basic-box { fill: #f0f8ff; stroke: var(--secondary-color); stroke-width: 2; rx: 8; }
      .multiple-box { fill: #f0fff0; stroke: var(--success-color); stroke-width: 2; rx: 8; }
      .char-box { fill: #fff8f0; stroke: var(--info-color); stroke-width: 2; rx: 8; }
    </style>
  </defs>
  
  <title>図4-14：文字列入力の処理方法</title>
  <desc>文字列データの様々な処理方法を示した図</desc>
  
  <g class="container">
    <!-- Title -->
    <text x="400" y="30" text-anchor="middle" class="title">図4-14：文字列入力の処理方法</text>
    
    <!-- Basic string input -->
    <rect x="50" y="60" width="700" height="120" class="basic-box"/>
    <text x="70" y="85" class="subtitle">基本的な文字列入力：</text>
    <text x="70" y="110" class="code">s = input()                # 1行を文字列として</text>
    <text x="70" y="130" class="code">print(len(s))             # 文字数を出力</text>
    <text x="70" y="150" class="code">print(s.upper())          # 大文字に変換</text>
    <text x="70" y="170" class="code">print(s.lower())          # 小文字に変換</text>
    <text x="400" y="110" class="code">print(s[::-1])            # 文字列を逆順</text>
    <text x="400" y="130" class="text">✅ int()変換は不要</text>
    <text x="400" y="150" class="text">✅ そのまま文字列として処理</text>
    
    <!-- Multiple strings -->
    <rect x="50" y="200" width="700" height="120" class="multiple-box"/>
    <text x="70" y="225" class="subtitle">複数の文字列を読み込み：</text>
    <text x="70" y="250" class="code"># "apple banana cherry"のような入力</text>
    <text x="70" y="270" class="code">words = input().split()   # ['apple', 'banana', 'cherry']</text>
    <text x="70" y="290" class="code">for word in words:</text>
    <text x="90" y="310" class="code">print(f"単語: {word}, 長さ: {len(word)}")</text>
    
    <!-- Character by character -->
    <rect x="50" y="340" width="700" height="180" class="char-box"/>
    <text x="70" y="365" class="subtitle">1文字ずつの処理：</text>
    <text x="70" y="390" class="code">s = input()               # "hello"</text>
    <text x="70" y="410" class="code">for i, char in enumerate(s):</text>
    <text x="90" y="430" class="code">print(f"{i}番目の文字: {char}")</text>
    <text x="70" y="460" class="code"># 出力:</text>
    <text x="70" y="480" class="code"># 0番目の文字: h</text>
    <text x="70" y="500" class="code"># 1番目の文字: e</text>
    <text x="400" y="390" class="text">💡 enumerate()で位置と文字を同時取得</text>
    <text x="400" y="410" class="text">• インデックス付きでループ処理</text>
    <text x="400" y="430" class="text">• 文字の位置が重要な問題で活用</text>
    <text x="400" y="450" class="text">• 文字列の各文字に個別処理が可能</text>
  </g>
</svg>