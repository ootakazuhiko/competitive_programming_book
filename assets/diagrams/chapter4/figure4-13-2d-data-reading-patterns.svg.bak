<svg viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      :root {
        --primary-color: #2c3e50;
        --secondary-color: #3498db;
        --accent-color: #e74c3c;
        --success-color: #27ae60;
        --info-color: #17a2b8;
        --background-light: #ecf0f1;
        --text-dark: #2c3e50;
        --border-color: #bdc3c7;
      }
      
      .container { font-family: 'Inter', sans-serif; }
      .title { font-size: 18px; font-weight: 600; fill: var(--primary-color); }
      .subtitle { font-size: 14px; font-weight: 500; fill: var(--text-dark); }
      .text { font-size: 12px; fill: var(--text-dark); }
      .code { font-family: 'Consolas', 'Monaco', monospace; font-size: 11px; fill: var(--text-dark); }
      .example-box { fill: #f0f8ff; stroke: var(--secondary-color); stroke-width: 2; rx: 8; }
      .code-box { fill: #f0fff0; stroke: var(--success-color); stroke-width: 2; rx: 8; }
      .compact-box { fill: #fff8f0; stroke: var(--info-color); stroke-width: 2; rx: 8; }
      .usage-box { fill: #f8f9fa; stroke: var(--border-color); stroke-width: 2; rx: 8; }
    </style>
  </defs>
  
  <title>図4-13：2次元データの読み込みパターン</title>
  <desc>N行M列の2次元データを読み込む方法を示した図</desc>
  
  <g class="container">
    <!-- Title -->
    <text x="400" y="30" text-anchor="middle" class="title">図4-13：2次元データの読み込みパターン</text>
    
    <!-- Problem example -->
    <rect x="50" y="60" width="300" height="140" class="example-box"/>
    <text x="70" y="85" class="subtitle">問題例：「N行M列の数値が与えられる」</text>
    <text x="70" y="110" class="text">入力例:</text>
    <text x="70" y="130" class="code">3 4        ← N=3行, M=4列</text>
    <text x="70" y="150" class="code">1 2 3 4    ← 1行目のデータ</text>
    <text x="70" y="170" class="code">5 6 7 8    ← 2行目のデータ</text>
    <text x="70" y="190" class="code">9 10 11 12 ← 3行目のデータ</text>
    
    <!-- Processing code -->
    <rect x="370" y="60" width="380" height="200" class="code-box"/>
    <text x="390" y="85" class="subtitle">処理コード：</text>
    <text x="390" y="110" class="code">n, m = map(int, input().split())</text>
    <text x="390" y="130" class="code">matrix = []</text>
    <text x="390" y="150" class="code">for i in range(n):</text>
    <text x="410" y="170" class="code">row = list(map(int, input().split()))</text>
    <text x="410" y="190" class="code">matrix.append(row)</text>
    <text x="390" y="220" class="code"># 結果: matrix = [[1,2,3,4], [5,6,7,8], [9,10,11,12]]</text>
    <text x="390" y="250" class="code"># アクセス例 / print(matrix[0][0])  # 1行1列目: 1</text>
    
    <!-- Compact version -->
    <rect x="50" y="280" width="700" height="80" class="compact-box"/>
    <text x="70" y="305" class="subtitle">内包表記版：</text>
    <text x="70" y="330" class="code">n, m = map(int, input().split())</text>
    <text x="70" y="350" class="code">matrix = [list(map(int, input().split())) for _ in range(n)]</text>
    
    <!-- Practical usage -->
    <rect x="50" y="380" width="700" height="180" class="usage-box"/>
    <text x="70" y="405" class="subtitle">実用例：</text>
    <text x="70" y="430" class="code"># 各行の合計を計算</text>
    <text x="70" y="450" class="code">for i, row in enumerate(matrix):</text>
    <text x="90" y="470" class="code">print(f"{i+1}行目の合計: {sum(row)}")</text>
    <text x="70" y="500" class="code"># 全体の最大値を探索</text>
    <text x="70" y="520" class="code">max_val = 0</text>
    <text x="70" y="540" class="code">for row in matrix:</text>
    <text x="90" y="560" class="code">for val in row:</text>
    <text x="110" y="580" class="code">max_val = max(max_val, val)</text>
    
    <text x="400" y="430" class="code">print(f"最大値: {max_val}")</text>
    <text x="400" y="460" class="text">💡 2次元配列として様々な操作が可能</text>
    <text x="400" y="480" class="text">• matrix[i][j] で i行j列目にアクセス</text>
    <text x="400" y="500" class="text">• 行ごと、列ごとの処理が簡単</text>
    <text x="400" y="520" class="text">• グリッド問題でよく使用される</text>
  </g>
</svg>