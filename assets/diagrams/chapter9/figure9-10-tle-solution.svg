<svg viewBox="0 0 800 700" xmlns="http://www.w3.org/2000/svg">
  <title>図9-10：TLE対策の段階的アプローチ</title>
  <desc>Time Limit Exceeded エラーを効率的に解決するための体系的アプローチ</desc>
  
  <!-- 背景 -->
  <rect width="800" height="700" fill="#f8fafc"/>
  
  <!-- タイトル -->
  <text x="400" y="32" text-anchor="middle" font-family="Arial, sans-serif" font-size="20" font-weight="bold" fill="#1f2937">
    TLE対策の段階的アプローチ
  </text>
  
  <!-- TLE分析手順の見出し -->
  <rect x="50" y="60" width="700" height="40" rx="8" fill="#fefbeb" stroke="#f59e0b" stroke-width="2"/>
  <text x="400" y="82" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#d97706">
    ⏰ Time Limit Exceeded（TLE）が出た時の段階的分析
  </text>
  
  <!-- Step 1: 計算量の理論分析 -->
  <rect x="50" y="120" width="700" height="160" rx="8" fill="#dbeafe" stroke="#3b82f6" stroke-width="2"/>
  <text x="80" y="142" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1e40af">
    📊 Step 1: 計算量の理論分析
  </text>
  <text x="80" y="158" font-family="Arial, sans-serif" font-size="10" fill="#3730a3">
    現在のアルゴリズムの計算量を客観的に評価
  </text>
  
  <g transform="translate(80, 165)">
    <rect x="0" y="0" width="200" height="100" rx="4" fill="#f0f9ff" stroke="#3b82f6" stroke-width="1"/>
    <text x="100" y="16" text-anchor="middle" font-family="Arial, sans-serif" font-size="9" font-weight="bold" fill="#1e40af">
      🔍 計算量の見積もり
    </text>
    <text x="5" y="28" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • ネストしたループの深さ
    </text>
    <text x="5" y="38" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 再帰の呼び出し回数
    </text>
    <text x="5" y="48" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • データ構造の操作コスト
    </text>
    <text x="5" y="58" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • ソート・探索の頻度
    </text>
    <text x="5" y="68" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 全体の理論計算量
    </text>
    <text x="5" y="78" font-family="Arial, sans-serif" font-size="7" fill="#dc2626">
      例: O(N³) ✗ → O(N²) ✓
    </text>
    <text x="5" y="88" font-family="Arial, sans-serif" font-size="7" fill="#dc2626">
      例: O(2^N) ✗ → O(N×2^N) ✓
    </text>
    
    <rect x="220" y="0" width="200" height="100" rx="4" fill="#f0f9ff" stroke="#3b82f6" stroke-width="1"/>
    <text x="320" y="16" text-anchor="middle" font-family="Arial, sans-serif" font-size="9" font-weight="bold" fill="#1e40af">
      📈 制約と制限時間の確認
    </text>
    <text x="225" y="28" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • N ≤ 10⁶ → O(N log N) まで
    </text>
    <text x="225" y="38" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • N ≤ 10³ → O(N³) でも可能
    </text>
    <text x="225" y="48" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 時間制限: 通常2秒以内
    </text>
    <text x="225" y="58" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 目安: 10⁸ 回の操作/秒
    </text>
    <text x="225" y="68" font-family="Arial, sans-serif" font-size="7" fill="#16a34a">
      適切な計算量の選択が重要
    </text>
    <text x="225" y="78" font-family="Arial, sans-serif" font-size="7" fill="#dc2626">
      制約を無視した実装は必ずTLE
    </text>
    
    <rect x="440" y="0" width="200" height="100" rx="4" fill="#f0f9ff" stroke="#3b82f6" stroke-width="1"/>
    <text x="540" y="16" text-anchor="middle" font-family="Arial, sans-serif" font-size="9" font-weight="bold" fill="#1e40af">
      ⚡ 即座に確認すべき点
    </text>
    <text x="445" y="28" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 無限ループが発生していないか
    </text>
    <text x="445" y="38" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 終了条件が正しく設定されているか
    </text>
    <text x="445" y="48" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 意図しない重複計算がないか
    </text>
    <text x="445" y="58" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • メモリ使用量が適切か
    </text>
    <text x="445" y="68" font-family="Arial, sans-serif" font-size="7" fill="#16a34a">
      基本的なバグの確認から開始
    </text>
    <text x="445" y="78" font-family="Arial, sans-serif" font-size="7" fill="#dc2626">
      ロジックエラーがTLEの原因の場合も
    </text>
  </g>
  
  <!-- Step 2: アルゴリズムの選択と最適化 -->
  <rect x="50" y="300" width="700" height="160" rx="8" fill="#d1fae5" stroke="#22c55e" stroke-width="2"/>
  <text x="80" y="322" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#047857">
    🚀 Step 2: アルゴリズムの選択と最適化
  </text>
  <text x="80" y="338" font-family="Arial, sans-serif" font-size="10" fill="#065f46">
    より効率的なアプローチの検討と実装
  </text>
  
  <g transform="translate(80, 345)">
    <rect x="0" y="0" width="200" height="100" rx="4" fill="#f0fdf4" stroke="#22c55e" stroke-width="1"/>
    <text x="100" y="16" text-anchor="middle" font-family="Arial, sans-serif" font-size="9" font-weight="bold" fill="#047857">
      🔄 アルゴリズム変更
    </text>
    <text x="5" y="28" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 全探索 → 貪欲法
    </text>
    <text x="5" y="38" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 再帰 → 動的プログラミング
    </text>
    <text x="5" y="48" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 線形探索 → 二分探索
    </text>
    <text x="5" y="58" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • ソート → ハッシュテーブル
    </text>
    <text x="5" y="68" font-family="Arial, sans-serif" font-size="7" fill="#16a34a">
      根本的なアプローチの見直し
    </text>
    <text x="5" y="78" font-family="Arial, sans-serif" font-size="7" fill="#16a34a">
      問題の性質を活かした手法選択
    </text>
    
    <rect x="220" y="0" width="200" height="100" rx="4" fill="#f0fdf4" stroke="#22c55e" stroke-width="1"/>
    <text x="320" y="16" text-anchor="middle" font-family="Arial, sans-serif" font-size="9" font-weight="bold" fill="#047857">
      💡 実装の最適化
    </text>
    <text x="225" y="28" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • メモ化による重複計算の削減
    </text>
    <text x="225" y="38" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 早期リターンの追加
    </text>
    <text x="225" y="48" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 不要な処理の除去
    </text>
    <text x="225" y="58" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • データ構造の変更
    </text>
    <text x="225" y="68" font-family="Arial, sans-serif" font-size="7" fill="#16a34a">
      既存コードの効率化
    </text>
    <text x="225" y="78" font-family="Arial, sans-serif" font-size="7" fill="#16a34a">
      定数倍の高速化
    </text>
    
    <rect x="440" y="0" width="200" height="100" rx="4" fill="#f0fdf4" stroke="#22c55e" stroke-width="1"/>
    <text x="540" y="16" text-anchor="middle" font-family="Arial, sans-serif" font-size="9" font-weight="bold" fill="#047857">
      📝 具体的な改善例
    </text>
    <text x="445" y="28" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      改善前: for i in range(n):</text>
    <text x="465" y="38" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      for j in range(n): check(i,j)
    </text>
    <text x="445" y="48" font-family="Arial, sans-serif" font-size="7" fill="#16a34a">
      改善後: set を使った O(1) 探索
    </text>
    <text x="445" y="58" font-family="Arial, sans-serif" font-size="7" fill="#16a34a">
      sorted() + bisect.bisect_left()
    </text>
    <text x="445" y="68" font-family="Arial, sans-serif" font-size="7" fill="#16a34a">
      collections.defaultdict 活用
    </text>
    <text x="445" y="78" font-family="Arial, sans-serif" font-size="7" fill="#dc2626">
      O(N²) → O(N log N) の改善例
    </text>
  </g>
  
  <!-- Step 3: 詳細な最適化とプロファイリング -->
  <rect x="50" y="480" width="700" height="140" rx="8" fill="#fef3c7" stroke="#f59e0b" stroke-width="2"/>
  <text x="80" y="502" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#d97706">
    🔬 Step 3: 詳細な最適化とプロファイリング
  </text>
  <text x="80" y="518" font-family="Arial, sans-serif" font-size="10" fill="#92400e">
    細かい最適化による実行時間の短縮
  </text>
  
  <g transform="translate(80, 525)">
    <rect x="0" y="0" width="150" height="80" rx="4" fill="#fefce8" stroke="#f59e0b" stroke-width="1"/>
    <text x="75" y="16" text-anchor="middle" font-family="Arial, sans-serif" font-size="9" font-weight="bold" fill="#d97706">
      ⚡ 実装の高速化
    </text>
    <text x="5" y="28" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • リスト内包表記の活用
    </text>
    <text x="5" y="38" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 不要な関数呼び出し削減
    </text>
    <text x="5" y="48" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 変数への事前格納
    </text>
    <text x="5" y="58" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • numpy/pandas 活用
    </text>
    <text x="5" y="68" font-family="Arial, sans-serif" font-size="7" fill="#16a34a">
      定数倍の改善
    </text>
    
    <rect x="170" y="0" width="200" height="80" rx="4" fill="#fefce8" stroke="#f59e0b" stroke-width="1"/>
    <text x="270" y="16" text-anchor="middle" font-family="Arial, sans-serif" font-size="9" font-weight="bold" fill="#d97706">
      📊 実行時間の測定
    </text>
    <text x="175" y="28" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      import time</text>
    <text x="175" y="38" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      start = time.time()</text>
    <text x="175" y="48" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      # 実行したい処理</text>
    <text x="175" y="58" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      print(f"Time: {time.time()-start:.3f}s")</text>
    <text x="175" y="68" font-family="Arial, sans-serif" font-size="7" fill="#16a34a">
      ボトルネックの特定
    </text>
    
    <rect x="390" y="0" width="250" height="80" rx="4" fill="#fefce8" stroke="#f59e0b" stroke-width="1"/>
    <text x="515" y="16" text-anchor="middle" font-family="Arial, sans-serif" font-size="9" font-weight="bold" fill="#d97706">
      🎯 最終確認ポイント
    </text>
    <text x="395" y="28" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • 最大ケースでの実行時間確認
    </text>
    <text x="395" y="38" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • メモリ使用量が制限内か
    </text>
    <text x="395" y="48" font-family="Arial, sans-serif" font-size="7" fill="#1f2937">
      • エッジケースでの動作確認
    </text>
    <text x="395" y="58" font-family="Arial, sans-serif" font-size="7" fill="#16a34a">
      安全マージンを考慮した実装
    </text>
    <text x="395" y="68" font-family="Arial, sans-serif" font-size="7" fill="#dc2626">
      1.5秒以内を目標に調整
    </text>
  </g>
  
  <!-- フロー矢印 -->
  <path d="M400 280 L400 300" stroke="#374151" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  <path d="M400 460 L400 480" stroke="#374151" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
    
  <!-- 成功への道筋 -->
  <rect x="50" y="640" width="700" height="50" rx="8" fill="#f0fdf4" stroke="#22c55e" stroke-width="2"/>
  <text x="400" y="658" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#16a34a">
    🎯 TLE解決の成功パターン
  </text>
  <text x="400" y="672" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" fill="#16a34a">
    計算量分析 → アルゴリズム改善 → 詳細最適化 = 確実な高速化
  </text>
  <text x="400" y="684" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" fill="#16a34a">
    「とりあえず高速化」ではなく「根本的な計算量改善」を優先
  </text>
  
  <!-- 矢印マーカー定義 -->
  <defs>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#374151"/>
    </marker>
  </defs>
</svg>