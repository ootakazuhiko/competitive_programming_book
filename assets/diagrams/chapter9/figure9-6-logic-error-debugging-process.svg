<svg viewBox="0 0 950 1200" xmlns="http://www.w3.org/2000/svg" style="font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;">
  <defs>
    <style>
      .header { font-size: 16px; font-weight: 600; fill: var(--text-primary, #1a1a1a); }
      .section-title { font-size: 14px; font-weight: 600; fill: var(--text-primary, #1a1a1a); }
      .item-text { font-size: 12px; fill: var(--text-secondary, #4a4a4a); }
      .code-text { font-size: 10px; fill: var(--text-tertiary, #666666); font-family: 'Monaco', 'Consolas', monospace; }
      .bug-text { font-size: 10px; fill: var(--error-text, #dc2626); font-family: 'Monaco', 'Consolas', monospace; }
      .fix-text { font-size: 10px; fill: var(--success-text, #059669); font-family: 'Monaco', 'Consolas', monospace; }
      .comment-text { font-size: 9px; fill: var(--warning-text, #f59e0b); }
      .step-text { font-size: 11px; fill: var(--text-tertiary, #666666); }
      .highlight-text { font-size: 11px; fill: var(--success-text, #059669); font-weight: 500; }
      .warning-text { font-size: 11px; fill: var(--error-text, #dc2626); font-weight: 500; }
      .box { fill: var(--bg-primary, #ffffff); stroke: var(--border-primary, #d1d5db); stroke-width: 1.5; }
      .header-box { fill: var(--bg-accent, #f3f4f6); stroke: var(--border-primary, #d1d5db); stroke-width: 1.5; }
      .characteristics-box { fill: var(--bg-warning, #fffaf0); stroke: var(--border-warning, #f59e0b); stroke-width: 1.5; }
      .trace-box { fill: var(--bg-info, #e8f5ff); stroke: var(--border-info, #3b82f6); stroke-width: 1.5; }
      .testing-box { fill: var(--bg-success, #f0f9f5); stroke: var(--border-success, #10b981); stroke-width: 1.5; }
      .arrow { fill: none; stroke: var(--text-tertiary, #666666); stroke-width: 2; marker-end: url(#arrowhead); }
    </style>
    <defs>
      <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
        <polygon points="0 0, 10 3.5, 0 7" fill="var(--text-tertiary, #666666)"/>
      </marker>
    </defs>
  </defs>

  <!-- Title -->
  <rect x="20" y="20" width="910" height="40" class="header-box" rx="8"/>
  <text x="475" y="44" text-anchor="middle" class="header">🕵️ 論理エラーの発見・修正プロセス</text>

  <!-- Logic Error Characteristics -->
  <rect x="40" y="80" width="870" height="260" class="characteristics-box" rx="8"/>
  <text x="60" y="104" class="section-title">🕵️ 論理エラーの特徴</text>
  
  <text x="80" y="128" class="item-text">• エラーメッセージが出ない</text>
  <text x="80" y="148" class="item-text">• プログラムは最後まで実行される</text>
  <text x="80" y="168" class="item-text">• でも出力が期待と違う</text>
  <text x="80" y="188" class="item-text">• 一番発見が困難で修正に時間がかかる</text>
  
  <text x="80" y="218" class="section-title">例：「配列の最大値を求める」プログラム</text>
  
  <rect x="60" y="240" width="420" height="80" class="box" rx="4"/>
  <text x="80" y="260" class="warning-text">🚨 バグのあるコード：</text>
  <text x="80" y="280" class="bug-text">def find_max(arr):</text>
  <text x="100" y="300" class="bug-text">max_val = 0           # ⚠️ 初期値が間違い</text>
  <text x="100" y="320" class="bug-text">for num in arr: ...</text>
  
  <rect x="500" y="240" width="350" height="80" class="box" rx="4"/>
  <text x="520" y="260" class="step-text">テスト結果：</text>
  <text x="520" y="280" class="highlight-text">find_max([3, 1, 4]) → 4 ✅</text>
  <text x="520" y="300" class="warning-text">find_max([-1, -5, -2]) → 0 ❌</text>
  
  <text x="80" y="330" class="warning-text">🐛 問題：全要素が負数の場合、初期値0が返される</text>

  <!-- Arrow -->
  <path d="M 475 350 L 475 380" class="arrow"/>

  <!-- Manual Trace Process -->
  <rect x="40" y="360" width="870" height="280" class="trace-box" rx="8"/>
  <text x="60" y="384" class="section-title">🔍 手動トレースによる原因発見</text>
  
  <text x="80" y="408" class="item-text">📝 find_max([-1, -5, -2])の動作を追跡：</text>
  
  <rect x="60" y="420" width="400" height="200" class="box" rx="4"/>
  <text x="80" y="440" class="step-text">Step 1: max_val = 0 で初期化</text>
  <text x="80" y="460" class="step-text">Step 2: num = -1, -1 > 0? → False</text>
  <text x="80" y="480" class="step-text">Step 3: num = -5, -5 > 0? → False</text>
  <text x="80" y="500" class="step-text">Step 4: num = -2, -2 > 0? → False</text>
  <text x="80" y="520" class="step-text">Step 5: return 0</text>
  
  <text x="80" y="560" class="warning-text">💡 発見：初期値が0だと、負数が全て無視される</text>
  <text x="80" y="580" class="highlight-text">🎯 解決策：最初の要素で初期化する</text>
  
  <rect x="480" y="420" width="370" height="200" class="box" rx="4"/>
  <text x="500" y="440" class="highlight-text">✅ 修正版：</text>
  <text x="500" y="460" class="fix-text">def find_max(arr):</text>
  <text x="520" y="480" class="fix-text">max_val = arr[0]      # 最初の要素で初期化</text>
  <text x="520" y="500" class="fix-text">for num in arr[1:]:   # 2番目から開始</text>
  <text x="540" y="520" class="fix-text">if num > max_val:</text>
  <text x="560" y="540" class="fix-text">max_val = num</text>
  <text x="520" y="560" class="fix-text">return max_val</text>
  
  <text x="500" y="590" class="highlight-text">🎯 キーポイント：適切な初期値設定</text>

  <!-- Arrow -->
  <path d="M 475 650 L 475 680" class="arrow"/>

  <!-- Boundary Testing -->
  <rect x="40" y="660" width="870" height="300" class="testing-box" rx="8"/>
  <text x="60" y="684" class="section-title">🧪 境界値テストによる検証</text>
  
  <text x="80" y="708" class="item-text">🎯 テストケース設計：</text>
  
  <rect x="60" y="720" width="260" height="220" class="box" rx="4"/>
  <text x="80" y="740" class="highlight-text">✅ 正常ケース：</text>
  <text x="80" y="760" class="step-text">• [1, 2, 3, 4, 5] → 5</text>
  <text x="80" y="780" class="step-text">• [10, 5, 8] → 10</text>
  
  <text x="80" y="810" class="highlight-text">✅ 境界ケース：</text>
  <text x="80" y="830" class="step-text">• [5] → 5（単一要素）</text>
  <text x="80" y="850" class="step-text">• [-1, -2, -3] → -1（全負数）</text>
  <text x="80" y="870" class="step-text">• [0, 0, 0] → 0（全ゼロ）</text>
  
  <text x="80" y="900" class="highlight-text">✅ 特殊ケース：</text>
  <text x="80" y="920" class="step-text">• [100, -50, 200] → 200（正負混在）</text>
  
  <rect x="340" y="720" width="280" height="220" class="box" rx="4"/>
  <text x="360" y="740" class="item-text">💡 テストの考え方：</text>
  <text x="380" y="760" class="step-text">• 期待される動作ケース</text>
  <text x="380" y="780" class="step-text">• 想定外の入力パターン</text>
  <text x="380" y="800" class="step-text">• 数学的に特別な意味を持つ値</text>
  
  <text x="360" y="830" class="item-text">🔍 デバッグのコツ：</text>
  <text x="380" y="850" class="step-text">• 手動で期待値を計算</text>
  <text x="380" y="870" class="step-text">• 実際の処理と比較</text>
  <text x="380" y="890" class="step-text">• 差異の原因を特定</text>
  <text x="380" y="910" class="step-text">• 境界値で徹底検証</text>
  
  <rect x="640" y="720" width="250" height="220" class="box" rx="4"/>
  <text x="660" y="740" class="item-text">🎯 論理エラー対策：</text>
  
  <text x="660" y="770" class="highlight-text">1. 小さいケースで手動計算</text>
  <text x="660" y="790" class="highlight-text">2. プログラムの動作追跡</text>
  <text x="660" y="810" class="highlight-text">3. 期待値との差異発見</text>
  <text x="660" y="830" class="highlight-text">4. 根本原因の特定</text>
  <text x="660" y="850" class="highlight-text">5. 修正版の実装</text>
  <text x="660" y="870" class="highlight-text">6. 境界値での徹底テスト</text>
  
  <text x="660" y="910" class="warning-text">最も時間のかかるエラー</text>
  <text x="660" y="930" class="warning-text">→ 体系的アプローチが重要</text>

  <!-- Bottom Summary -->
  <rect x="40" y="980" width="870" height="60" class="header-box" rx="8"/>
  <text x="60" y="1004" class="section-title">🎯 論理エラーは最も厄介だが、体系的なデバッグで確実に解決できる</text>
  <text x="80" y="1024" class="item-text">手動トレース → 原因特定 → 修正 → 境界値テスト の流れを習慣化しよう</text>
</svg>