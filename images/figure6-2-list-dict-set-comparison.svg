<svg viewBox="0 0 1200 1500" xmlns="http://www.w3.org/2000/svg">
  <title>図6-2：リストvs辞書vs集合比較</title>
  <desc>競技プログラミングにおけるリスト、辞書、集合の特徴と使い分けの詳細比較</desc>
  
  <!-- Background -->
  <rect width="1200" height="1500" fill="#f8fafc"/>
  
  <!-- Title -->
  <text x="600" y="30" font-family="Arial, sans-serif" font-size="20" font-weight="bold" text-anchor="middle" fill="#1e293b">
    リスト vs 辞書 vs 集合比較
  </text>
  
  <!-- Subtitle -->
  <text x="600" y="55" font-family="Arial, sans-serif" font-size="14" text-anchor="middle" fill="#64748b">
    3つの基本データ構造の特徴と適用場面
  </text>
  
  <!-- Comparison Overview -->
  <rect x="50" y="80" width="1100" height="80" rx="8" fill="#f0f9ff" stroke="#0ea5e9" stroke-width="2"/>
  <text x="600" y="105" font-family="Arial, sans-serif" font-size="18" font-weight="bold" text-anchor="middle" fill="#0369a1">
    📊 データ構造の特性比較
  </text>
  
  <text x="600" y="125" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="#0369a1">
    それぞれ異なる特徴を持ち、問題に応じて使い分けることで効率的なプログラムが実現できる
  </text>
  <text x="600" y="145" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="#0369a1">
    💡 速度・メモリ・機能性のバランスを理解して選択しよう
  </text>
  
  <!-- List Section -->
  <rect x="80" y="180" width="340" height="280" rx="8" fill="#dbeafe" stroke="#3b82f6" stroke-width="2"/>
  <text x="250" y="205" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#1e40af">
    📋 リスト（List）
  </text>
  
  <rect x="100" y="220" width="300" height="230" rx="4" fill="white" stroke="#93c5fd" stroke-width="1"/>
  <text x="110" y="240" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#1e40af">
    🎯 基本特徴:
  </text>
  <text x="120" y="255" font-family="Arial, sans-serif" font-size="10" fill="#1e40af">
    <tspan x="120" dy="0">• 順序のあるデータの集合</tspan>
    <tspan x="120" dy="12">• 重複要素を許可</tspan>
    <tspan x="120" dy="12">• インデックスによるアクセス</tspan>
    <tspan x="120" dy="12">• 可変長（動的にサイズ変更）</tspan>
  </text>
  
  <text x="110" y="305" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#1e40af">
    ⚡ 計算量:
  </text>
  <text x="120" y="320" font-family="Arial, sans-serif" font-size="10" fill="#1e40af">
    <tspan x="120" dy="0">• アクセス: O(1) ← インデックス指定</tspan>
    <tspan x="120" dy="12">• 検索: O(N) ← 線形探索</tspan>
    <tspan x="120" dy="12">• 挿入: O(1)末尾 / O(N)中間</tspan>
    <tspan x="120" dy="12">• 削除: O(1)末尾 / O(N)中間</tspan>
  </text>
  
  <text x="110" y="370" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#1e40af">
    💡 適用場面:
  </text>
  <text x="120" y="385" font-family="Arial, sans-serif" font-size="10" fill="#1e40af">
    <tspan x="120" dy="0">• データの順序が重要</tspan>
    <tspan x="120" dy="12">• インデックスでのアクセス</tspan>
    <tspan x="120" dy="12">• ソートが必要</tspan>
    <tspan x="120" dy="12">• 重複データの保持</tspan>
  </text>
  
  <text x="110" y="435" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#1e40af">
    例: [1, 3, 2, 3, 5] → 順序あり・重複あり
  </text>
  
  <!-- Dictionary Section -->
  <rect x="440" y="180" width="340" height="280" rx="8" fill="#dcfce7" stroke="#22c55e" stroke-width="2"/>
  <text x="610" y="205" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#15803d">
    📖 辞書（Dictionary）
  </text>
  
  <rect x="460" y="220" width="300" height="230" rx="4" fill="white" stroke="#86efac" stroke-width="1"/>
  <text x="470" y="240" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#15803d">
    🎯 基本特徴:
  </text>
  <text x="480" y="255" font-family="Arial, sans-serif" font-size="10" fill="#15803d">
    <tspan x="480" dy="0">• キー → 値の対応関係</tspan>
    <tspan x="480" dy="12">• キーの重複は不可</tspan>
    <tspan x="480" dy="12">• キーによる高速アクセス</tspan>
    <tspan x="480" dy="12">• ハッシュテーブル実装</tspan>
  </text>
  
  <text x="470" y="305" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#15803d">
    ⚡ 計算量:
  </text>
  <text x="480" y="320" font-family="Arial, sans-serif" font-size="10" fill="#15803d">
    <tspan x="480" dy="0">• アクセス: O(1) ← キー指定</tspan>
    <tspan x="480" dy="12">• 検索: O(1) ← ハッシュ</tspan>
    <tspan x="480" dy="12">• 挿入: O(1) ← 高速</tspan>
    <tspan x="480" dy="12">• 削除: O(1) ← 高速</tspan>
  </text>
  
  <text x="470" y="370" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#15803d">
    💡 適用場面:
  </text>
  <text x="480" y="385" font-family="Arial, sans-serif" font-size="10" fill="#15803d">
    <tspan x="480" dy="0">• 頻度カウント</tspan>
    <tspan x="480" dy="12">• 高速検索・存在判定</tspan>
    <tspan x="480" dy="12">• キーバリューペア管理</tspan>
    <tspan x="480" dy="12">• メモ化・キャッシュ</tspan>
  </text>
  
  <text x="470" y="435" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#15803d">
    例: {"a":3, "b":1, "c":2} → キー:値ペア
  </text>
  
  <!-- Set Section -->
  <rect x="800" y="180" width="320" height="280" rx="8" fill="#fef3c7" stroke="#f59e0b" stroke-width="2"/>
  <text x="960" y="205" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#d97706">
    🔢 集合（Set）
  </text>
  
  <rect x="820" y="220" width="280" height="230" rx="4" fill="white" stroke="#fbbf24" stroke-width="1"/>
  <text x="830" y="240" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#d97706">
    🎯 基本特徴:
  </text>
  <text x="840" y="255" font-family="Arial, sans-serif" font-size="10" fill="#d97706">
    <tspan x="840" dy="0">• 重複のない要素の集合</tspan>
    <tspan x="840" dy="12">• 順序は保証されない</tspan>
    <tspan x="840" dy="12">• 数学的集合演算をサポート</tspan>
    <tspan x="840" dy="12">• ハッシュセット実装</tspan>
  </text>
  
  <text x="830" y="305" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#d97706">
    ⚡ 計算量:
  </text>
  <text x="840" y="320" font-family="Arial, sans-serif" font-size="10" fill="#d97706">
    <tspan x="840" dy="0">• 存在判定: O(1) ← ハッシュ</tspan>
    <tspan x="840" dy="12">• 挿入: O(1) ← 高速</tspan>
    <tspan x="840" dy="12">• 削除: O(1) ← 高速</tspan>
    <tspan x="840" dy="12">• 集合演算: O(min(|A|,|B|))</tspan>
  </text>
  
  <text x="830" y="370" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#d97706">
    💡 適用場面:
  </text>
  <text x="840" y="385" font-family="Arial, sans-serif" font-size="10" fill="#d97706">
    <tspan x="840" dy="0">• 重複除去</tspan>
    <tspan x="840" dy="12">• 要素の存在判定</tspan>
    <tspan x="840" dy="12">• 集合演算（和・積・差）</tspan>
    <tspan x="840" dy="12">• ユニークな要素管理</tspan>
  </text>
  
  <text x="830" y="435" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#d97706">
    例: {1, 2, 3, 5} → 重複なし・順序なし
  </text>
  
  <!-- Performance Comparison -->
  <rect x="50" y="480" width="1100" height="200" rx="8" fill="#f3e8ff" stroke="#8b5cf6" stroke-width="2"/>
  <text x="600" y="505" font-family="Arial, sans-serif" font-size="18" font-weight="bold" text-anchor="middle" fill="#6b21a8">
    ⚡ 性能比較：検索速度の違い
  </text>
  
  <!-- Search Performance Example -->
  <rect x="80" y="525" width="1040" height="145" rx="6" fill="white" stroke="#c4b5fd" stroke-width="1"/>
  <text x="90" y="545" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#6b21a8">
    📊 具体例：「特定の要素が存在するか？」の判定速度
  </text>
  
  <!-- List Performance -->
  <rect x="100" y="560" width="320" height="100" rx="4" fill="#fef2f2" stroke="#f87171" stroke-width="1"/>
  <text x="110" y="580" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#dc2626">
    📋 リスト検索（O(N)）
  </text>
  <text x="120" y="595" font-family="Monaco, monospace" font-size="9" fill="#dc2626">
    <tspan x="120" dy="0">data = [1, 5, 3, 8, 2, 7, 4, 6]</tspan>
    <tspan x="120" dy="11">result = 7 in data  # 線形探索</tspan>
    <tspan x="120" dy="11"># 最悪の場合、全要素をチェック</tspan>
  </text>
  <text x="110" y="640" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#dc2626">
    1万要素 → 最大1万回チェック
  </text>
  <text x="110" y="655" font-family="Arial, sans-serif" font-size="10" fill="#dc2626">
    データ量に比例して遅くなる
  </text>
  
  <!-- Dictionary Performance -->
  <rect x="440" y="560" width="320" height="100" rx="4" fill="#f0fdf4" stroke="#86efac" stroke-width="1"/>
  <text x="450" y="580" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#15803d">
    📖 辞書検索（O(1)）
  </text>
  <text x="460" y="595" font-family="Monaco, monospace" font-size="9" fill="#15803d">
    <tspan x="460" dy="0">data = {1:True, 5:True, 3:True, ...}</tspan>
    <tspan x="460" dy="11">result = 7 in data  # ハッシュ検索</tspan>
    <tspan x="460" dy="11"># 一回の計算で結果が分かる</tspan>
  </text>
  <text x="450" y="640" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#15803d">
    1万要素 → 1回の計算で完了
  </text>
  <text x="450" y="655" font-family="Arial, sans-serif" font-size="10" fill="#15803d">
    データ量に関係なく高速
  </text>
  
  <!-- Set Performance -->
  <rect x="780" y="560" width="320" height="100" rx="4" fill="#fffbeb" stroke="#fbbf24" stroke-width="1"/>
  <text x="790" y="580" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#d97706">
    🔢 集合検索（O(1)）
  </text>
  <text x="800" y="595" font-family="Monaco, monospace" font-size="9" fill="#d97706">
    <tspan x="800" dy="0">data = {1, 5, 3, 8, 2, 7, 4, 6}</tspan>
    <tspan x="800" dy="11">result = 7 in data  # ハッシュ検索</tspan>
    <tspan x="800" dy="11"># 辞書と同様に高速</tspan>
  </text>
  <text x="790" y="640" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#d97706">
    1万要素 → 1回の計算で完了
  </text>
  <text x="790" y="655" font-family="Arial, sans-serif" font-size="10" fill="#d97706">
    存在判定に特化した構造
  </text>
  
  <!-- Use Case Scenarios -->
  <rect x="50" y="700" width="1100" height="300" rx="8" fill="#ecfdf5" stroke="#10b981" stroke-width="2"/>
  <text x="600" y="725" font-family="Arial, sans-serif" font-size="18" font-weight="bold" text-anchor="middle" fill="#047857">
    🎯 実践的な使い分けシナリオ
  </text>
  
  <!-- Scenario 1: Counting -->
  <rect x="80" y="745" width="340" height="120" rx="6" fill="white" stroke="#6ee7b7" stroke-width="1"/>
  <text x="90" y="765" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#047857">
    シナリオ1: 文字の出現回数を数える
  </text>
  <text x="100" y="785" font-family="Arial, sans-serif" font-size="10" fill="#047857">
    <tspan x="100" dy="0">問題: "programming"の各文字の出現回数</tspan>
  </text>
  <text x="100" y="805" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#047857">
    最適解: 📖 辞書を使用
  </text>
  <text x="100" y="820" font-family="Monaco, monospace" font-size="8" fill="#047857">
    <tspan x="100" dy="0">count = {}</tspan>
    <tspan x="100" dy="10">for char in "programming":</tspan>
    <tspan x="100" dy="10">    count[char] = count.get(char, 0) + 1</tspan>
  </text>
  <text x="100" y="855" font-family="Arial, sans-serif" font-size="9" fill="#047857">
    理由: キー→値の対応が自然
  </text>
  
  <!-- Scenario 2: Unique Elements -->
  <rect x="440" y="745" width="340" height="120" rx="6" fill="white" stroke="#6ee7b7" stroke-width="1"/>
  <text x="450" y="765" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#047857">
    シナリオ2: 重複を除去してユニークな要素
  </text>
  <text x="460" y="785" font-family="Arial, sans-serif" font-size="10" fill="#047857">
    <tspan x="460" dy="0">問題: [1,2,2,3,3,3,4]からユニーク要素</tspan>
  </text>
  <text x="460" y="805" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#047857">
    最適解: 🔢 集合を使用
  </text>
  <text x="460" y="820" font-family="Monaco, monospace" font-size="8" fill="#047857">
    <tspan x="460" dy="0">data = [1, 2, 2, 3, 3, 3, 4]</tspan>
    <tspan x="460" dy="10">unique = list(set(data))</tspan>
    <tspan x="460" dy="10"># [1, 2, 3, 4]</tspan>
  </text>
  <text x="460" y="855" font-family="Arial, sans-serif" font-size="9" fill="#047857">
    理由: 自動的に重複除去
  </text>
  
  <!-- Scenario 3: Ordered Processing -->
  <rect x="800" y="745" width="320" height="120" rx="6" fill="white" stroke="#6ee7b7" stroke-width="1"/>
  <text x="810" y="765" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#047857">
    シナリオ3: 順序を保持した処理
  </text>
  <text x="820" y="785" font-family="Arial, sans-serif" font-size="10" fill="#047857">
    <tspan x="820" dy="0">問題: 成績順にソートして表示</tspan>
  </text>
  <text x="820" y="805" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#047857">
    最適解: 📋 リストを使用
  </text>
  <text x="820" y="820" font-family="Monaco, monospace" font-size="8" fill="#047857">
    <tspan x="820" dy="0">scores = [85, 92, 78, 95, 88]</tspan>
    <tspan x="820" dy="10">scores.sort(reverse=True)</tspan>
    <tspan x="820" dy="10"># [95, 92, 88, 85, 78]</tspan>
  </text>
  <text x="820" y="855" font-family="Arial, sans-serif" font-size="9" fill="#047857">
    理由: 順序保持・ソート可能
  </text>
  
  <!-- Advanced Scenario -->
  <rect x="80" y="875" width="1040" height="115" rx="6" fill="white" stroke="#6ee7b7" stroke-width="1"/>
  <text x="90" y="895" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#047857">
    シナリオ4: 複合的な問題 - 「2つのリストの共通要素を高速に見つける」
  </text>
  
  <text x="100" y="915" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#047857">
    ❌ 非効率な解法（O(N×M)）:
  </text>
  <text x="110" y="930" font-family="Monaco, monospace" font-size="9" fill="#dc2626">
    <tspan x="110" dy="0">common = [x for x in list1 if x in list2]  # 二重ループ相当</tspan>
  </text>
  
  <text x="100" y="950" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#047857">
    ✅ 効率的な解法（O(N+M)）:
  </text>
  <text x="110" y="965" font-family="Monaco, monospace" font-size="9" fill="#15803d">
    <tspan x="110" dy="0">set1 = set(list1)  # O(N)</tspan>
    <tspan x="110" dy="11">common = [x for x in list2 if x in set1]  # O(M)</tspan>
  </text>
  <text x="110" y="985" font-family="Arial, sans-serif" font-size="10" fill="#047857">
    集合の高速検索（O(1)）を活用して全体計算量を大幅改善
  </text>
  
  <!-- Memory and Space Usage -->
  <rect x="50" y="1020" width="1100" height="180" rx="8" fill="#fff7ed" stroke="#ea580c" stroke-width="2"/>
  <text x="600" y="1045" font-family="Arial, sans-serif" font-size="18" font-weight="bold" text-anchor="middle" fill="#c2410c">
    💾 メモリ使用量とトレードオフ
  </text>
  
  <rect x="80" y="1065" width="340" height="125" rx="6" fill="white" stroke="#fed7aa" stroke-width="1"/>
  <text x="90" y="1085" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#c2410c">
    📋 リスト
  </text>
  <text x="100" y="1105" font-family="Arial, sans-serif" font-size="10" fill="#c2410c">
    <tspan x="100" dy="0">• メモリ効率: 👍 良い</tspan>
    <tspan x="100" dy="12">• 順序保持: ✅ あり</tspan>
    <tspan x="100" dy="12">• 検索速度: ❌ 遅い O(N)</tspan>
    <tspan x="100" dy="12">• 重複許可: ✅ あり</tspan>
  </text>
  <text x="90" y="1165" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#c2410c">
    適用: 順序重要・メモリ節約したい場合
  </text>
  
  <rect x="440" y="1065" width="340" height="125" rx="6" fill="white" stroke="#fed7aa" stroke-width="1"/>
  <text x="450" y="1085" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#c2410c">
    📖 辞書
  </text>
  <text x="460" y="1105" font-family="Arial, sans-serif" font-size="10" fill="#c2410c">
    <tspan x="460" dy="0">• メモリ効率: ⚠️ 中程度（ハッシュ表）</tspan>
    <tspan x="460" dy="12">• 順序保持: ⚠️ Python3.7+で保持</tspan>
    <tspan x="460" dy="12">• 検索速度: ✅ 高速 O(1)</tspan>
    <tspan x="460" dy="12">• キー重複: ❌ 不可</tspan>
  </text>
  <text x="450" y="1165" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#c2410c">
    適用: 高速検索・キー値ペア管理
  </text>
  
  <rect x="800" y="1065" width="320" height="125" rx="6" fill="white" stroke="#fed7aa" stroke-width="1"/>
  <text x="810" y="1085" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#c2410c">
    🔢 集合
  </text>
  <text x="820" y="1105" font-family="Arial, sans-serif" font-size="10" fill="#c2410c">
    <tspan x="820" dy="0">• メモリ効率: ⚠️ 中程度（ハッシュ表）</tspan>
    <tspan x="820" dy="12">• 順序保持: ❌ なし</tspan>
    <tspan x="820" dy="12">• 検索速度: ✅ 高速 O(1)</tspan>
    <tspan x="820" dy="12">• 重複除去: ✅ 自動</tspan>
  </text>
  <text x="810" y="1165" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#c2410c">
    適用: 存在判定・重複除去・集合演算
  </text>
  
  <!-- Decision Matrix -->
  <rect x="50" y="1220" width="1100" height="200" rx="8" fill="#f0f9ff" stroke="#0ea5e9" stroke-width="2"/>
  <text x="600" y="1245" font-family="Arial, sans-serif" font-size="18" font-weight="bold" text-anchor="middle" fill="#0369a1">
    🎯 選択判断マトリックス
  </text>
  
  <rect x="80" y="1265" width="1040" height="145" rx="6" fill="white" stroke="#7dd3fc" stroke-width="1"/>
  <text x="90" y="1285" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#0369a1">
    状況別の最適選択:
  </text>
  
  <text x="100" y="1305" font-family="Arial, sans-serif" font-size="11" fill="#0369a1">
    <tspan x="100" dy="0">🔍 「高速な検索・存在判定が最重要」 → 辞書 or 集合</tspan>
    <tspan x="100" dy="16">📊 「キー→値の対応関係を管理」 → 辞書</tspan>
    <tspan x="100" dy="16">🔢 「重複除去・集合演算が必要」 → 集合</tspan>
    <tspan x="100" dy="16">📋 「順序保持・インデックスアクセスが重要」 → リスト</tspan>
  </text>
  
  <text x="100" y="1370" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#0369a1">
    💡 判断の優先順位:
  </text>
  <text x="110" y="1385" font-family="Arial, sans-serif" font-size="10" fill="#0369a1">
    <tspan x="110" dy="0">1. 計算量要件（検索頻度・データサイズ）</tspan>
    <tspan x="110" dy="12">2. データの性質（順序・重複・キー値ペア）</tspan>
    <tspan x="110" dy="12">3. メモリ制約・その他の要件</tspan>
  </text>
  
  <!-- Success Message -->
  <rect x="50" y="1440" width="1100" height="50" rx="8" fill="#ecfdf5" stroke="#10b981" stroke-width="2"/>
  <text x="600" y="1465" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#047857">
    🎯 データ構造の特性を理解して適切に選択しよう！
  </text>
  <text x="600" y="1485" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="#047857">
    問題の要件を分析し、パフォーマンスとメモリのバランスを考慮した最適な選択が重要です
  </text>
</svg>