<svg viewBox="0 0 1200 1400" xmlns="http://www.w3.org/2000/svg">
  <title>図6-1：データ構造選択ガイド</title>
  <desc>競技プログラミングにおける効果的なデータ構造の選択指針</desc>
  
  <!-- Background -->
  <rect width="1200" height="1400" fill="#f8fafc"/>
  
  <!-- Title -->
  <text x="600" y="30" font-family="Arial, sans-serif" font-size="20" font-weight="bold" text-anchor="middle" fill="#1e293b">
    データ構造選択ガイド
  </text>
  
  <!-- Subtitle -->
  <text x="600" y="55" font-family="Arial, sans-serif" font-size="14" text-anchor="middle" fill="#64748b">
    問題に応じた最適なデータ構造の選び方
  </text>
  
  <!-- Data Structure Importance -->
  <rect x="50" y="80" width="1100" height="100" rx="8" fill="#f0f9ff" stroke="#0ea5e9" stroke-width="2"/>
  <text x="600" y="105" font-family="Arial, sans-serif" font-size="18" font-weight="bold" text-anchor="middle" fill="#0369a1">
    🏗️ なぜデータ構造選択が重要なのか？
  </text>
  
  <text x="600" y="130" font-family="Arial, sans-serif" font-size="13" text-anchor="middle" fill="#0369a1">
    適切なデータ構造を選ぶことで、計算量を大幅に改善し、コードをシンプルに保てる
  </text>
  <text x="600" y="150" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="#0369a1">
    💡 「どのようにデータを管理するか」が解法の効率性を決定する
  </text>
  <text x="600" y="170" font-family="Arial, sans-serif" font-size="12" font-weight="bold" text-anchor="middle" fill="#0369a1">
    例：線形探索 O(N) → ハッシュ表 O(1) の劇的改善
  </text>
  
  <!-- Core Data Structures -->
  <!-- List -->
  <rect x="80" y="200" width="340" height="200" rx="8" fill="#dbeafe" stroke="#3b82f6" stroke-width="2"/>
  <text x="250" y="225" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#1e40af">
    📋 リスト（配列）
  </text>
  
  <rect x="100" y="240" width="300" height="150" rx="4" fill="white" stroke="#93c5fd" stroke-width="1"/>
  <text x="110" y="260" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#1e40af">
    🎯 特徴:
  </text>
  <text x="120" y="275" font-family="Arial, sans-serif" font-size="10" fill="#1e40af">
    <tspan x="120" dy="0">• 順序のあるデータの集合</tspan>
    <tspan x="120" dy="12">• インデックスによる高速アクセス O(1)</tspan>
    <tspan x="120" dy="12">• 挿入・削除は位置により O(1)～O(N)</tspan>
  </text>
  
  <text x="110" y="315" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#1e40af">
    💡 適用場面:
  </text>
  <text x="120" y="330" font-family="Arial, sans-serif" font-size="10" fill="#1e40af">
    <tspan x="120" dy="0">• 順序が重要なデータ</tspan>
    <tspan x="120" dy="12">• インデックスでの高速アクセスが必要</tspan>
    <tspan x="120" dy="12">• ソートが必要</tspan>
    <tspan x="120" dy="12">• 配列の動的な拡張が必要</tspan>
  </text>
  
  <text x="110" y="375" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#1e40af">
    Python: list, C++: vector
  </text>
  
  <!-- Dictionary -->
  <rect x="440" y="200" width="340" height="200" rx="8" fill="#dcfce7" stroke="#22c55e" stroke-width="2"/>
  <text x="610" y="225" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#15803d">
    📖 辞書（ハッシュ表）
  </text>
  
  <rect x="460" y="240" width="300" height="150" rx="4" fill="white" stroke="#86efac" stroke-width="1"/>
  <text x="470" y="260" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#15803d">
    🎯 特徴:
  </text>
  <text x="480" y="275" font-family="Arial, sans-serif" font-size="10" fill="#15803d">
    <tspan x="480" dy="0">• キー → 値の対応関係</tspan>
    <tspan x="480" dy="12">• キーによる高速アクセス O(1)</tspan>
    <tspan x="480" dy="12">• 重複キーは許可しない</tspan>
  </text>
  
  <text x="470" y="315" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#15803d">
    💡 適用場面:
  </text>
  <text x="480" y="330" font-family="Arial, sans-serif" font-size="10" fill="#15803d">
    <tspan x="480" dy="0">• データの頻度カウント</tspan>
    <tspan x="480" dy="12">• 高速な検索・存在判定が必要</tspan>
    <tspan x="480" dy="12">• 一意性の保証</tspan>
    <tspan x="480" dy="12">• キーバリューペアの管理</tspan>
  </text>
  
  <text x="470" y="375" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#15803d">
    Python: dict, C++: unordered_map
  </text>
  
  <!-- Set -->
  <rect x="800" y="200" width="320" height="200" rx="8" fill="#fef3c7" stroke="#f59e0b" stroke-width="2"/>
  <text x="960" y="225" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#d97706">
    🔢 集合（セット）
  </text>
  
  <rect x="820" y="240" width="280" height="150" rx="4" fill="white" stroke="#fbbf24" stroke-width="1"/>
  <text x="830" y="260" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#d97706">
    🎯 特徴:
  </text>
  <text x="840" y="275" font-family="Arial, sans-serif" font-size="10" fill="#d97706">
    <tspan x="840" dy="0">• 重複のない要素の集合</tspan>
    <tspan x="840" dy="12">• 高速な存在判定 O(1)</tspan>
    <tspan x="840" dy="12">• 集合演算（和・積・差）</tspan>
  </text>
  
  <text x="830" y="315" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#d97706">
    💡 適用場面:
  </text>
  <text x="840" y="330" font-family="Arial, sans-serif" font-size="10" fill="#d97706">
    <tspan x="840" dy="0">• 重複除去</tspan>
    <tspan x="840" dy="12">• 要素の存在判定</tspan>
    <tspan x="840" dy="12">• 集合演算が必要</tspan>
    <tspan x="840" dy="12">• ユニークな要素の管理</tspan>
  </text>
  
  <text x="830" y="375" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#d97706">
    Python: set, C++: unordered_set
  </text>
  
  <!-- Advanced Data Structures -->
  <!-- Stack -->
  <rect x="80" y="420" width="340" height="200" rx="8" fill="#f3e8ff" stroke="#8b5cf6" stroke-width="2"/>
  <text x="250" y="445" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#6b21a8">
    📚 スタック（Stack）
  </text>
  
  <rect x="100" y="460" width="300" height="150" rx="4" fill="white" stroke="#c4b5fd" stroke-width="1"/>
  <text x="110" y="480" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#6b21a8">
    🎯 特徴:
  </text>
  <text x="120" y="495" font-family="Arial, sans-serif" font-size="10" fill="#6b21a8">
    <tspan x="120" dy="0">• LIFO（後入れ先出し）構造</tspan>
    <tspan x="120" dy="12">• push/pop操作が O(1)</tspan>
    <tspan x="120" dy="12">• 最後に追加した要素のみアクセス可能</tspan>
  </text>
  
  <text x="110" y="535" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#6b21a8">
    💡 適用場面:
  </text>
  <text x="120" y="550" font-family="Arial, sans-serif" font-size="10" fill="#6b21a8">
    <tspan x="120" dy="0">• 括弧のマッチング判定</tspan>
    <tspan x="120" dy="12">• 関数呼び出しの管理</tspan>
    <tspan x="120" dy="12">• 深さ優先探索（DFS）</tspan>
    <tspan x="120" dy="12">• 逆ポーランド記法の計算</tspan>
  </text>
  
  <text x="110" y="595" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#6b21a8">
    Python: list, C++: stack
  </text>
  
  <!-- Queue -->
  <rect x="440" y="420" width="340" height="200" rx="8" fill="#fef2f2" stroke="#ef4444" stroke-width="2"/>
  <text x="610" y="445" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#dc2626">
    🚶 キュー（Queue）
  </text>
  
  <rect x="460" y="460" width="300" height="150" rx="4" fill="white" stroke="#fecaca" stroke-width="1"/>
  <text x="470" y="480" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#dc2626">
    🎯 特徴:
  </text>
  <text x="480" y="495" font-family="Arial, sans-serif" font-size="10" fill="#dc2626">
    <tspan x="480" dy="0">• FIFO（先入れ先出し）構造</tspan>
    <tspan x="480" dy="12">• enqueue/dequeue操作が O(1)</tspan>
    <tspan x="480" dy="12">• 順序を保持した処理</tspan>
  </text>
  
  <text x="470" y="535" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#dc2626">
    💡 適用場面:
  </text>
  <text x="480" y="550" font-family="Arial, sans-serif" font-size="10" fill="#dc2626">
    <tspan x="480" dy="0">• 幅優先探索（BFS）</tspan>
    <tspan x="480" dy="12">• 待ち行列の管理</tspan>
    <tspan x="480" dy="12">• 順次処理が必要な場合</tspan>
    <tspan x="480" dy="12">• レベル順のトラバーサル</tspan>
  </text>
  
  <text x="470" y="595" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#dc2626">
    Python: deque, C++: queue
  </text>
  
  <!-- Priority Queue -->
  <rect x="800" y="420" width="320" height="200" rx="8" fill="#fff7ed" stroke="#ea580c" stroke-width="2"/>
  <text x="960" y="445" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#c2410c">
    ⭐ 優先度付きキュー
  </text>
  
  <rect x="820" y="460" width="280" height="150" rx="4" fill="white" stroke="#fed7aa" stroke-width="1"/>
  <text x="830" y="480" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#c2410c">
    🎯 特徴:
  </text>
  <text x="840" y="495" font-family="Arial, sans-serif" font-size="10" fill="#c2410c">
    <tspan x="840" dy="0">• 優先度順での取り出し</tspan>
    <tspan x="840" dy="12">• 挿入・取り出し O(log N)</tspan>
    <tspan x="840" dy="12">• ヒープ構造で実装</tspan>
  </text>
  
  <text x="830" y="535" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#c2410c">
    💡 適用場面:
  </text>
  <text x="840" y="550" font-family="Arial, sans-serif" font-size="10" fill="#c2410c">
    <tspan x="840" dy="0">• 最短経路アルゴリズム</tspan>
    <tspan x="840" dy="12">• 貪欲法での選択</tspan>
    <tspan x="840" dy="12">• トップK問題</tspan>
    <tspan x="840" dy="12">• スケジューリング</tspan>
  </text>
  
  <text x="830" y="595" font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="#c2410c">
    Python: heapq, C++: priority_queue
  </text>
  
  <!-- Decision Tree -->
  <rect x="50" y="640" width="1100" height="300" rx="8" fill="#ecfdf5" stroke="#10b981" stroke-width="2"/>
  <text x="600" y="665" font-family="Arial, sans-serif" font-size="18" font-weight="bold" text-anchor="middle" fill="#047857">
    🎯 データ構造選択の判断フロー
  </text>
  
  <!-- Start Node -->
  <rect x="480" y="685" width="240" height="50" rx="6" fill="#fef3c7" stroke="#f59e0b" stroke-width="2"/>
  <text x="600" y="705" font-family="Arial, sans-serif" font-size="12" font-weight="bold" text-anchor="middle" fill="#d97706">
    問題を分析
  </text>
  <text x="600" y="720" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#d97706">
    どのような操作が必要？
  </text>
  
  <!-- Decision Arrows and Nodes -->
  <defs>
    <marker id="greenArrow" markerWidth="12" markerHeight="8" refX="11" refY="4" orient="auto">
      <polygon points="0 0, 12 4, 0 8" fill="#047857"/>
    </marker>
  </defs>
  
  <!-- Branch 1: Search/Lookup -->
  <path d="M 520 735 L 400 760 L 300 785" stroke="#047857" stroke-width="2" fill="none" marker-end="url(#greenArrow)"/>
  <text x="380" y="755" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#047857">
    高速検索・存在判定
  </text>
  
  <rect x="120" y="785" width="180" height="60" rx="4" fill="#dcfce7" stroke="#22c55e" stroke-width="2"/>
  <text x="210" y="805" font-family="Arial, sans-serif" font-size="11" font-weight="bold" text-anchor="middle" fill="#15803d">
    辞書 or 集合
  </text>
  <text x="210" y="820" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#15803d">
    キー値ペア → 辞書
  </text>
  <text x="210" y="835" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#15803d">
    存在判定のみ → 集合
  </text>
  
  <!-- Branch 2: Ordered Access -->
  <path d="M 600 735 L 600 785" stroke="#047857" stroke-width="2" fill="none" marker-end="url(#greenArrow)"/>
  <text x="610" y="760" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#047857">
    順序・インデックス重要
  </text>
  
  <rect x="510" y="785" width="180" height="60" rx="4" fill="#dbeafe" stroke="#3b82f6" stroke-width="2"/>
  <text x="600" y="805" font-family="Arial, sans-serif" font-size="11" font-weight="bold" text-anchor="middle" fill="#1e40af">
    リスト
  </text>
  <text x="600" y="820" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#1e40af">
    インデックスアクセス
  </text>
  <text x="600" y="835" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#1e40af">
    ソート・順序保持
  </text>
  
  <!-- Branch 3: LIFO/FIFO -->
  <path d="M 680 735 L 800 760 L 900 785" stroke="#047857" stroke-width="2" fill="none" marker-end="url(#greenArrow)"/>
  <text x="800" y="755" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#047857">
    LIFO/FIFO処理
  </text>
  
  <rect x="800" y="785" width="180" height="60" rx="4" fill="#f3e8ff" stroke="#8b5cf6" stroke-width="2"/>
  <text x="890" y="805" font-family="Arial, sans-serif" font-size="11" font-weight="bold" text-anchor="middle" fill="#6b21a8">
    スタック/キュー
  </text>
  <text x="890" y="820" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#6b21a8">
    LIFO → スタック
  </text>
  <text x="890" y="835" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#6b21a8">
    FIFO → キュー
  </text>
  
  <!-- Detailed Decision Criteria -->
  <rect x="80" y="865" width="1040" height="65" rx="4" fill="white" stroke="#6ee7b7" stroke-width="1"/>
  <text x="90" y="885" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#047857">
    詳細な判断基準:
  </text>
  <text x="100" y="905" font-family="Arial, sans-serif" font-size="10" fill="#047857">
    <tspan x="100" dy="0">🔍 高速検索が必要 → dict/set (O(1))　　📋 順序・インデックスが重要 → list (O(1)アクセス)</tspan>
    <tspan x="100" dy="14">📚 最後のものから処理 → stack (LIFO)　　🚶 順番に処理 → queue (FIFO)　　⭐ 優先度付き処理 → priority_queue</tspan>
  </text>
  
  <!-- Performance Comparison -->
  <rect x="50" y="960" width="1100" height="200" rx="8" fill="#fff7ed" stroke="#ea580c" stroke-width="2"/>
  <text x="600" y="985" font-family="Arial, sans-serif" font-size="18" font-weight="bold" text-anchor="middle" fill="#c2410c">
    ⚡ 計算量比較表
  </text>
  
  <!-- Table Header -->
  <rect x="80" y="1005" width="120" height="25" fill="#ea580c" rx="4"/>
  <text x="140" y="1022" font-family="Arial, sans-serif" font-size="11" font-weight="bold" text-anchor="middle" fill="white">
    データ構造
  </text>
  
  <rect x="200" y="1005" width="100" height="25" fill="#ea580c" rx="4"/>
  <text x="250" y="1022" font-family="Arial, sans-serif" font-size="11" font-weight="bold" text-anchor="middle" fill="white">
    検索
  </text>
  
  <rect x="300" y="1005" width="100" height="25" fill="#ea580c" rx="4"/>
  <text x="350" y="1022" font-family="Arial, sans-serif" font-size="11" font-weight="bold" text-anchor="middle" fill="white">
    挿入
  </text>
  
  <rect x="400" y="1005" width="100" height="25" fill="#ea580c" rx="4"/>
  <text x="450" y="1022" font-family="Arial, sans-serif" font-size="11" font-weight="bold" text-anchor="middle" fill="white">
    削除
  </text>
  
  <rect x="500" y="1005" width="150" height="25" fill="#ea580c" rx="4"/>
  <text x="575" y="1022" font-family="Arial, sans-serif" font-size="11" font-weight="bold" text-anchor="middle" fill="white">
    メモリ使用量
  </text>
  
  <rect x="650" y="1005" width="200" height="25" fill="#ea580c" rx="4"/>
  <text x="750" y="1022" font-family="Arial, sans-serif" font-size="11" font-weight="bold" text-anchor="middle" fill="white">
    特徴・用途
  </text>
  
  <rect x="850" y="1005" width="270" height="25" fill="#ea580c" rx="4"/>
  <text x="985" y="1022" font-family="Arial, sans-serif" font-size="11" font-weight="bold" text-anchor="middle" fill="white">
    実装言語
  </text>
  
  <!-- Table Rows -->
  <!-- List -->
  <rect x="80" y="1030" width="120" height="25" fill="white" rx="2"/>
  <text x="140" y="1047" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#c2410c">
    リスト
  </text>
  
  <rect x="200" y="1030" width="100" height="25" fill="white" rx="2"/>
  <text x="250" y="1047" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#dc2626">
    O(N)
  </text>
  
  <rect x="300" y="1030" width="100" height="25" fill="white" rx="2"/>
  <text x="350" y="1047" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#15803d">
    O(1)*
  </text>
  
  <rect x="400" y="1030" width="100" height="25" fill="white" rx="2"/>
  <text x="450" y="1047" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#dc2626">
    O(N)
  </text>
  
  <rect x="500" y="1030" width="150" height="25" fill="white" rx="2"/>
  <text x="575" y="1047" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#15803d">
    小
  </text>
  
  <rect x="650" y="1030" width="200" height="25" fill="white" rx="2"/>
  <text x="750" y="1047" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#c2410c">
    順序保持・インデックス
  </text>
  
  <rect x="850" y="1030" width="270" height="25" fill="white" rx="2"/>
  <text x="985" y="1047" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#c2410c">
    Python: list, C++: vector
  </text>
  
  <!-- Dictionary -->
  <rect x="80" y="1055" width="120" height="25" fill="white" rx="2"/>
  <text x="140" y="1072" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#c2410c">
    辞書
  </text>
  
  <rect x="200" y="1055" width="100" height="25" fill="white" rx="2"/>
  <text x="250" y="1072" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#15803d">
    O(1)
  </text>
  
  <rect x="300" y="1055" width="100" height="25" fill="white" rx="2"/>
  <text x="350" y="1072" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#15803d">
    O(1)
  </text>
  
  <rect x="400" y="1055" width="100" height="25" fill="white" rx="2"/>
  <text x="450" y="1072" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#15803d">
    O(1)
  </text>
  
  <rect x="500" y="1055" width="150" height="25" fill="white" rx="2"/>
  <text x="575" y="1072" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#f59e0b">
    中
  </text>
  
  <rect x="650" y="1055" width="200" height="25" fill="white" rx="2"/>
  <text x="750" y="1072" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#c2410c">
    キー検索・頻度計算
  </text>
  
  <rect x="850" y="1055" width="270" height="25" fill="white" rx="2"/>
  <text x="985" y="1072" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#c2410c">
    Python: dict, C++: unordered_map
  </text>
  
  <!-- Set -->
  <rect x="80" y="1080" width="120" height="25" fill="white" rx="2"/>
  <text x="140" y="1097" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#c2410c">
    集合
  </text>
  
  <rect x="200" y="1080" width="100" height="25" fill="white" rx="2"/>
  <text x="250" y="1097" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#15803d">
    O(1)
  </text>
  
  <rect x="300" y="1080" width="100" height="25" fill="white" rx="2"/>
  <text x="350" y="1097" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#15803d">
    O(1)
  </text>
  
  <rect x="400" y="1080" width="100" height="25" fill="white" rx="2"/>
  <text x="450" y="1097" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#15803d">
    O(1)
  </text>
  
  <rect x="500" y="1080" width="150" height="25" fill="white" rx="2"/>
  <text x="575" y="1097" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#f59e0b">
    中
  </text>
  
  <rect x="650" y="1080" width="200" height="25" fill="white" rx="2"/>
  <text x="750" y="1097" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#c2410c">
    重複除去・存在判定
  </text>
  
  <rect x="850" y="1080" width="270" height="25" fill="white" rx="2"/>
  <text x="985" y="1097" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#c2410c">
    Python: set, C++: unordered_set
  </text>
  
  <!-- Stack/Queue -->
  <rect x="80" y="1105" width="120" height="25" fill="white" rx="2"/>
  <text x="140" y="1122" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#c2410c">
    スタック/キュー
  </text>
  
  <rect x="200" y="1105" width="100" height="25" fill="white" rx="2"/>
  <text x="250" y="1122" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#dc2626">
    O(N)
  </text>
  
  <rect x="300" y="1105" width="100" height="25" fill="white" rx="2"/>
  <text x="350" y="1122" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#15803d">
    O(1)
  </text>
  
  <rect x="400" y="1105" width="100" height="25" fill="white" rx="2"/>
  <text x="450" y="1122" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#15803d">
    O(1)
  </text>
  
  <rect x="500" y="1105" width="150" height="25" fill="white" rx="2"/>
  <text x="575" y="1122" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#15803d">
    小
  </text>
  
  <rect x="650" y="1105" width="200" height="25" fill="white" rx="2"/>
  <text x="750" y="1122" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#c2410c">
    FIFO/LIFO処理
  </text>
  
  <rect x="850" y="1105" width="270" height="25" fill="white" rx="2"/>
  <text x="985" y="1122" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#c2410c">
    Python: deque, C++: stack/queue
  </text>
  
  <!-- Priority Queue -->
  <rect x="80" y="1130" width="120" height="25" fill="white" rx="2"/>
  <text x="140" y="1147" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#c2410c">
    優先度付きキュー
  </text>
  
  <rect x="200" y="1130" width="100" height="25" fill="white" rx="2"/>
  <text x="250" y="1147" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#f59e0b">
    O(N)
  </text>
  
  <rect x="300" y="1130" width="100" height="25" fill="white" rx="2"/>
  <text x="350" y="1147" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#f59e0b">
    O(log N)
  </text>
  
  <rect x="400" y="1130" width="100" height="25" fill="white" rx="2"/>
  <text x="450" y="1147" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#f59e0b">
    O(log N)
  </text>
  
  <rect x="500" y="1130" width="150" height="25" fill="white" rx="2"/>
  <text x="575" y="1147" font-family="Arial, sans-serif" font-size="10" text-anchor="middle" fill="#f59e0b">
    中
  </text>
  
  <rect x="650" y="1130" width="200" height="25" fill="white" rx="2"/>
  <text x="750" y="1147" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#c2410c">
    優先度付き処理
  </text>
  
  <rect x="850" y="1130" width="270" height="25" fill="white" rx="2"/>
  <text x="985" y="1147" font-family="Arial, sans-serif" font-size="9" text-anchor="middle" fill="#c2410c">
    Python: heapq, C++: priority_queue
  </text>
  
  <!-- Success Message -->
  <rect x="50" y="1180" width="1100" height="80" rx="8" fill="#f0fdf4" stroke="#22c55e" stroke-width="2"/>
  <text x="600" y="1205" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#15803d">
    🎯 データ構造選択をマスターしよう！
  </text>
  <text x="600" y="1225" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="#15803d">
    問題の性質を理解し、適切なデータ構造を選択することで効率的な解法が実現できます
  </text>
  <text x="600" y="1245" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="#15803d">
    💡 「何を高速化したいか」を明確にして選択することが重要です
  </text>
  
  <!-- Note -->
  <text x="100" y="1295" font-family="Arial, sans-serif" font-size="10" fill="#64748b">
    *末尾への挿入はO(1)、中間への挿入はO(N)
  </text>
</svg>